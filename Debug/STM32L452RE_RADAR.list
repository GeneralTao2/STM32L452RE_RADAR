
STM32L452RE_RADAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc8  08006bc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd0  08006bd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024dc  20000070  08006c48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000254c  08006c48  0002254c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002da1  00000000  00000000  00037ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003bba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247d9  00000000  00000000  0003cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b0d  00000000  00000000  00061561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9ea1  00000000  00000000  0007206e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bf0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  0014bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b1c 	.word	0x08006b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006b1c 	.word	0x08006b1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <DMA_USART_Print>:

	DMA_USART_Print();
}

/* Printing already loaded mes */
void DMA_USART_Print() {
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	/* Enabling DMA transmission bit */
	huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <DMA_USART_Print+0x34>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <DMA_USART_Print+0x34>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d7e:	609a      	str	r2, [r3, #8]

	/* Starting USART to DMA transmission interrupt */
	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)mes,
 8000d80:	4c08      	ldr	r4, [pc, #32]	; (8000da4 <DMA_USART_Print+0x38>)
				(uint32_t)&huart2.Instance->TDR, strlen((char*)mes));
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <DMA_USART_Print+0x34>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3328      	adds	r3, #40	; 0x28
	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)mes,
 8000d88:	461d      	mov	r5, r3
				(uint32_t)&huart2.Instance->TDR, strlen((char*)mes));
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <DMA_USART_Print+0x38>)
 8000d8c:	f7ff fa28 	bl	80001e0 <strlen>
 8000d90:	4603      	mov	r3, r0
	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)mes,
 8000d92:	462a      	mov	r2, r5
 8000d94:	4621      	mov	r1, r4
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <DMA_USART_Print+0x3c>)
 8000d98:	f001 feb6 	bl	8002b08 <HAL_DMA_Start_IT>
}
 8000d9c:	bf00      	nop
 8000d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000da0:	200024c4 	.word	0x200024c4
 8000da4:	2000008c 	.word	0x2000008c
 8000da8:	200013cc 	.word	0x200013cc

08000dac <DMA_USART_Init>:

/*! Initializing DMA USART */
void DMA_USART_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <DMA_USART_Init+0x14>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <DMA_USART_Init+0x18>)
 8000db6:	f001 ffb7 	bl	8002d28 <HAL_DMA_RegisterCallback>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08000dc9 	.word	0x08000dc9
 8000dc4:	200013cc 	.word	0x200013cc

08000dc8 <DMATransferComplete>:

/* Callback function for disabling USART DMA mode */
void DMATransferComplete(DMA_HandleTypeDef *hdma) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <DMATransferComplete+0x24>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <DMATransferComplete+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dde:	609a      	str	r2, [r3, #8]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	200024c4 	.word	0x200024c4

08000df0 <DMA_USART_GetBuffer>:

uint8_t* DMA_USART_GetBuffer() {
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	return mes;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <DMA_USART_GetBuffer+0x10>)
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	2000008c 	.word	0x2000008c

08000e04 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <DWT_Init+0x38>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10e      	bne.n	8000e32 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <DWT_Init+0x38>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <DWT_Init+0x38>)
 8000e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e1e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <DWT_Init+0x3c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <DWT_Init+0x3c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <DWT_Init+0x3c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6013      	str	r3, [r2, #0]
    }
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000edf0 	.word	0xe000edf0
 8000e40:	e0001000 	.word	0xe0001000

08000e44 <DWT_Delay>:
 * If you are a newbie and see magic in DWT_Delay, consider this more
 * illustrative function, where you explicitly determine a counter
 * value when delay should stop while keeping things in bounds of uint32.
*/
void DWT_Delay(uint32_t us) // microseconds
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    uint32_t startTick  = DWT->CYCCNT,
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <DWT_Delay+0x60>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	60fb      	str	r3, [r7, #12]
             targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <DWT_Delay+0x60>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <DWT_Delay+0x64>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4914      	ldr	r1, [pc, #80]	; (8000eac <DWT_Delay+0x68>)
 8000e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8000e60:	0c9b      	lsrs	r3, r3, #18
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	fb01 f303 	mul.w	r3, r1, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]

    // Must check if target tick is out of bounds and overflowed
    if (targetTick > startTick) {
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d906      	bls.n	8000e82 <DWT_Delay+0x3e>
        // Not overflowed
        while (DWT->CYCCNT < targetTick);
 8000e74:	bf00      	nop
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <DWT_Delay+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8fa      	bhi.n	8000e76 <DWT_Delay+0x32>
    } else {
        // Overflowed
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
    }
}
 8000e80:	e00a      	b.n	8000e98 <DWT_Delay+0x54>
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8000e82:	bf00      	nop
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <DWT_Delay+0x60>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3fa      	bcc.n	8000e84 <DWT_Delay+0x40>
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <DWT_Delay+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f5      	bhi.n	8000e84 <DWT_Delay+0x40>
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e0001000 	.word	0xe0001000
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83

08000eb0 <EchoRadar_UpdateViewing>:

#include "echo_radar.h"

/* Updates stepAngle and mapLength relative to current coverage spectrum */
/* !!! Not implemented !!! */
void EchoRadar_UpdateViewing(void) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	echoRadar.stepAngle = /*EncoderGetTublerState(&encoder)*10*/10;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <EchoRadar_UpdateViewing+0x30>)
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	801a      	strh	r2, [r3, #0]
	echoRadar.mapLength = ECHO_MOTOR_VIEWING_ANGLE * 2 / echoRadar.stepAngle;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <EchoRadar_UpdateViewing+0x30>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f240 431a 	movw	r3, #1050	; 0x41a
 8000ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <EchoRadar_UpdateViewing+0x30>)
 8000ece:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	801a      	strh	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2000028c 	.word	0x2000028c

08000ee4 <EchoRadar_SendMessage>:

/* Sends message, that contain real-time map and its id via USART */
void EchoRadar_SendMessage(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
	char localBufer[32];
	strcpy((char*)DMA_USART_GetBuffer(), "{array=");
 8000eea:	f7ff ff81 	bl	8000df0 <DMA_USART_GetBuffer>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <EchoRadar_SendMessage+0xc8>)
 8000ef2:	cb03      	ldmia	r3!, {r0, r1}
 8000ef4:	6010      	str	r0, [r2, #0]
 8000ef6:	6051      	str	r1, [r2, #4]
	if(motor.direction != echoRadar.lastDirection) {
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <EchoRadar_SendMessage+0xcc>)
 8000efa:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f00:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000f04:	3316      	adds	r3, #22
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d043      	beq.n	8000f94 <EchoRadar_SendMessage+0xb0>
		for(uint16_t i=0; i<echoRadar.mapLength; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f10:	e017      	b.n	8000f42 <EchoRadar_SendMessage+0x5e>
			sprintf(localBufer, "%d ", echoRadar.map[i]);
 8000f12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f16:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	889b      	ldrh	r3, [r3, #4]
 8000f20:	461a      	mov	r2, r3
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4924      	ldr	r1, [pc, #144]	; (8000fb8 <EchoRadar_SendMessage+0xd4>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 f9fa 	bl	8006320 <siprintf>
			strcat((char*)DMA_USART_GetBuffer(), localBufer);
 8000f2c:	f7ff ff60 	bl	8000df0 <DMA_USART_GetBuffer>
 8000f30:	4602      	mov	r2, r0
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f005 fa12 	bl	8006360 <strcat>
		for(uint16_t i=0; i<echoRadar.mapLength; i++) {
 8000f3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f3e:	3301      	adds	r3, #1
 8000f40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f44:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000f48:	3310      	adds	r3, #16
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3df      	bcc.n	8000f12 <EchoRadar_SendMessage+0x2e>
		}
		sprintf(localBufer, "}{id=%d}", echoRadar.messageCounter);
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f54:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000f58:	3314      	adds	r3, #20
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4916      	ldr	r1, [pc, #88]	; (8000fbc <EchoRadar_SendMessage+0xd8>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 f9dc 	bl	8006320 <siprintf>
		strcat((char*)DMA_USART_GetBuffer(), localBufer);
 8000f68:	f7ff ff42 	bl	8000df0 <DMA_USART_GetBuffer>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4610      	mov	r0, r2
 8000f74:	f005 f9f4 	bl	8006360 <strcat>
		DMA_USART_Print();
 8000f78:	f7ff fef8 	bl	8000d6c <DMA_USART_Print>
		echoRadar.messageCounter++;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f7e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000f82:	3314      	adds	r3, #20
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f8c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000f90:	3314      	adds	r3, #20
 8000f92:	801a      	strh	r2, [r3, #0]
	}
	echoRadar.lastDirection = motor.direction;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <EchoRadar_SendMessage+0xcc>)
 8000f96:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <EchoRadar_SendMessage+0xd0>)
 8000f9c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000fa0:	3316      	adds	r3, #22
 8000fa2:	701a      	strb	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08006b34 	.word	0x08006b34
 8000fb0:	200014f4 	.word	0x200014f4
 8000fb4:	2000028c 	.word	0x2000028c
 8000fb8:	08006b3c 	.word	0x08006b3c
 8000fbc:	08006b40 	.word	0x08006b40

08000fc0 <EchoRadar_Init>:

/* Initialize global variables of this system */
void EchoRadar_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	EchoRadar_UpdateViewing();
 8000fc4:	f7ff ff74 	bl	8000eb0 <EchoRadar_UpdateViewing>
	motor.position = -ECHO_MOTOR_VIEWING_ANGLE + 1;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <EchoRadar_Init+0x50>)
 8000fca:	f64f 52f4 	movw	r2, #65012	; 0xfdf4
 8000fce:	859a      	strh	r2, [r3, #44]	; 0x2c
	echoRadar.counter = 0;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <EchoRadar_Init+0x54>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	805a      	strh	r2, [r3, #2]
	echoRadar.HCSR_State = 1;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <EchoRadar_Init+0x54>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	711a      	strb	r2, [r3, #4]
	echoRadar.mapIndex = 0;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <EchoRadar_Init+0x54>)
 8000fde:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000fe2:	3312      	adds	r3, #18
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
	echoRadar.standardMapReadingFlag = 1;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <EchoRadar_Init+0x54>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
	echoRadar.messageCounter = 0;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <EchoRadar_Init+0x54>)
 8000ff2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000ff6:	3314      	adds	r3, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	801a      	strh	r2, [r3, #0]
	echoRadar.lastDirection = motor.direction;
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <EchoRadar_Init+0x50>)
 8000ffe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <EchoRadar_Init+0x54>)
 8001004:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8001008:	3316      	adds	r3, #22
 800100a:	701a      	strb	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200014f4 	.word	0x200014f4
 8001014:	2000028c 	.word	0x2000028c

08001018 <EchoRadar_Precessing>:

/* Performs motor rotation and echo scanning */
void EchoRadar_Precessing(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af02      	add	r7, sp, #8
	if(EncoderGetButtonState(&encoder)) {
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <EchoRadar_Precessing+0x3c>)
 8001020:	f000 fa25 	bl	800146e <EncoderGetButtonState>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d009      	beq.n	800103e <EchoRadar_Precessing+0x26>
		EchoRadar_UpdateViewing();
 800102a:	f7ff ff41 	bl	8000eb0 <EchoRadar_UpdateViewing>
		if(echoRadar.HCSR_State) {
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <EchoRadar_Precessing+0x40>)
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <EchoRadar_Precessing+0x36>
			HCSR04_ReadDistance(&hcsr);
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <EchoRadar_Precessing+0x44>)
 8001038:	f000 fa88 	bl	800154c <HCSR04_ReadDistance>
		}
	} else {
		StepMotorWrite(&motor, 0, 0, 0, 0);
	}
}
 800103c:	e007      	b.n	800104e <EchoRadar_Precessing+0x36>
		StepMotorWrite(&motor, 0, 0, 0, 0);
 800103e:	2300      	movs	r3, #0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <EchoRadar_Precessing+0x48>)
 800104a:	f000 fc02 	bl	8001852 <StepMotorWrite>
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20001360 	.word	0x20001360
 8001058:	2000028c 	.word	0x2000028c
 800105c:	20001498 	.word	0x20001498
 8001060:	200014f4 	.word	0x200014f4

08001064 <EchoRadar_Compare>:
		EchoRadar_EnableMotor();
	}
}

/* Determines motion */
void EchoRadar_Compare(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	if(echoRadar.mapIndex > 2 && echoRadar.mapIndex < ECHO_MOTOR_VIEWING_ANGLE*2 - 4) {
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <EchoRadar_Compare+0xd4>)
 800106c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8001070:	3312      	adds	r3, #18
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d95b      	bls.n	8001130 <EchoRadar_Compare+0xcc>
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <EchoRadar_Compare+0xd4>)
 800107a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800107e:	3312      	adds	r3, #18
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	f240 4215 	movw	r2, #1045	; 0x415
 8001086:	4293      	cmp	r3, r2
 8001088:	d852      	bhi.n	8001130 <EchoRadar_Compare+0xcc>
		uint8_t localErrorStrength = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
		for(uint16_t i=echoRadar.mapIndex-2; i<=echoRadar.mapIndex+2; i++) {
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <EchoRadar_Compare+0xd4>)
 8001090:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8001094:	3312      	adds	r3, #18
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	3b02      	subs	r3, #2
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	e020      	b.n	80010e0 <EchoRadar_Compare+0x7c>
			if(abs(echoRadar.standardMap[echoRadar.mapIndex] - echoRadar.map[echoRadar.mapIndex]) > 10) {
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010a0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80010a4:	3312      	adds	r3, #18
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	88db      	ldrh	r3, [r3, #6]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010b4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80010b8:	3312      	adds	r3, #18
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010be:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	1acb      	subs	r3, r1, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bfb8      	it	lt
 80010ce:	425b      	neglt	r3, r3
 80010d0:	2b0a      	cmp	r3, #10
 80010d2:	dd02      	ble.n	80010da <EchoRadar_Compare+0x76>
				localErrorStrength++;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3301      	adds	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
		for(uint16_t i=echoRadar.mapIndex-2; i<=echoRadar.mapIndex+2; i++) {
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	3301      	adds	r3, #1
 80010de:	80bb      	strh	r3, [r7, #4]
 80010e0:	88ba      	ldrh	r2, [r7, #4]
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010e4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80010e8:	3312      	adds	r3, #18
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	3302      	adds	r3, #2
 80010ee:	429a      	cmp	r2, r3
 80010f0:	ddd5      	ble.n	800109e <EchoRadar_Compare+0x3a>
			}
		}
		if(localErrorStrength>4) {
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d912      	bls.n	800111e <EchoRadar_Compare+0xba>
			echoRadar.globalErrorStrength++;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <EchoRadar_Compare+0xd4>)
 80010fa:	f893 383b 	ldrb.w	r3, [r3, #2107]	; 0x83b
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <EchoRadar_Compare+0xd4>)
 8001104:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
			if(echoRadar.globalErrorStrength>3) {
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <EchoRadar_Compare+0xd4>)
 800110a:	f893 383b 	ldrb.w	r3, [r3, #2107]	; 0x83b
 800110e:	2b03      	cmp	r3, #3
 8001110:	d90e      	bls.n	8001130 <EchoRadar_Compare+0xcc>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4809      	ldr	r0, [pc, #36]	; (800113c <EchoRadar_Compare+0xd8>)
 8001118:	f002 f812 	bl	8003140 <HAL_GPIO_WritePin>
		} else {
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			echoRadar.globalErrorStrength = 0;
		}
	}
}
 800111c:	e008      	b.n	8001130 <EchoRadar_Compare+0xcc>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <EchoRadar_Compare+0xd8>)
 8001124:	f002 f80c 	bl	8003140 <HAL_GPIO_WritePin>
			echoRadar.globalErrorStrength = 0;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <EchoRadar_Compare+0xd4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000028c 	.word	0x2000028c
 800113c:	48000400 	.word	0x48000400

08001140 <EchoRadar_EnableMotor>:

/* Enables motor rotation */
void EchoRadar_EnableMotor(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <EchoRadar_EnableMotor+0xec>)
 8001146:	f003 fb85 	bl	8004854 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800114a:	4838      	ldr	r0, [pc, #224]	; (800122c <EchoRadar_EnableMotor+0xec>)
 800114c:	f003 fbd8 	bl	8004900 <HAL_TIM_Base_Start_IT>
	if(echoRadar.standardMapReadingFlag) {
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001152:	f893 383a 	ldrb.w	r3, [r3, #2106]	; 0x83a
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00f      	beq.n	800117a <EchoRadar_EnableMotor+0x3a>
		echoRadar.standardMap[echoRadar.mapIndex] = HCSR04_GetDistance(&hcsr);
 800115a:	4836      	ldr	r0, [pc, #216]	; (8001234 <EchoRadar_EnableMotor+0xf4>)
 800115c:	f000 f9da 	bl	8001514 <HCSR04_GetDistance>
 8001160:	4602      	mov	r2, r0
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001164:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8001168:	3312      	adds	r3, #18
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b291      	uxth	r1, r2
 800116e:	4a30      	ldr	r2, [pc, #192]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	460a      	mov	r2, r1
 8001176:	80da      	strh	r2, [r3, #6]
 8001178:	e012      	b.n	80011a0 <EchoRadar_EnableMotor+0x60>
	} else {
		echoRadar.map[echoRadar.mapIndex] = HCSR04_GetDistance(&hcsr);
 800117a:	482e      	ldr	r0, [pc, #184]	; (8001234 <EchoRadar_EnableMotor+0xf4>)
 800117c:	f000 f9ca 	bl	8001514 <HCSR04_GetDistance>
 8001180:	4602      	mov	r2, r0
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001184:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8001188:	3312      	adds	r3, #18
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b291      	uxth	r1, r2
 800118e:	4a28      	ldr	r2, [pc, #160]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001190:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	809a      	strh	r2, [r3, #4]
		EchoRadar_Compare();
 800119c:	f7ff ff62 	bl	8001064 <EchoRadar_Compare>
	}
	if(motor.direction) {
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <EchoRadar_EnableMotor+0xf8>)
 80011a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01b      	beq.n	80011e2 <EchoRadar_EnableMotor+0xa2>
		echoRadar.mapIndex++;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 80011ac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80011b0:	3312      	adds	r3, #18
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 80011ba:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80011be:	3312      	adds	r3, #18
 80011c0:	801a      	strh	r2, [r3, #0]
		if(motor.position + echoRadar.stepAngle  >= ECHO_MOTOR_VIEWING_ANGLE) {
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <EchoRadar_EnableMotor+0xf8>)
 80011c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	4413      	add	r3, r2
 80011d2:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80011d6:	dd23      	ble.n	8001220 <EchoRadar_EnableMotor+0xe0>
				motor.direction = 0;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <EchoRadar_EnableMotor+0xf8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
 80011e0:	e01e      	b.n	8001220 <EchoRadar_EnableMotor+0xe0>
		}
	} else {
		echoRadar.mapIndex--;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 80011e4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80011e8:	3312      	adds	r3, #18
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 80011f2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80011f6:	3312      	adds	r3, #18
 80011f8:	801a      	strh	r2, [r3, #0]
		if(motor.position - echoRadar.stepAngle <= -ECHO_MOTOR_VIEWING_ANGLE) {
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <EchoRadar_EnableMotor+0xf8>)
 80011fc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001200:	461a      	mov	r2, r3
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f513 7f03 	cmn.w	r3, #524	; 0x20c
 800120e:	da07      	bge.n	8001220 <EchoRadar_EnableMotor+0xe0>
			echoRadar.standardMapReadingFlag = 0;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
				motor.direction = 1;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <EchoRadar_EnableMotor+0xf8>)
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}
	echoRadar.HCSR_State = 0;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <EchoRadar_EnableMotor+0xf0>)
 8001222:	2200      	movs	r2, #0
 8001224:	711a      	strb	r2, [r3, #4]
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20001418 	.word	0x20001418
 8001230:	2000028c 	.word	0x2000028c
 8001234:	20001498 	.word	0x20001498
 8001238:	200014f4 	.word	0x200014f4

0800123c <EchoRadar_DisableMotor>:

/* Disables motor rotation */
void EchoRadar_DisableMotor(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim6);
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <EchoRadar_DisableMotor+0x1c>)
 8001242:	f003 fb31 	bl	80048a8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <EchoRadar_DisableMotor+0x1c>)
 8001248:	f003 fb84 	bl	8004954 <HAL_TIM_Base_Stop_IT>
	echoRadar.HCSR_State = 1;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <EchoRadar_DisableMotor+0x20>)
 800124e:	2201      	movs	r2, #1
 8001250:	711a      	strb	r2, [r3, #4]
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20001418 	.word	0x20001418
 800125c:	2000028c 	.word	0x2000028c

08001260 <EchoRadar_MotorTimerHandler>:

/* Handler, that called in timer interrupt
 * Performs stepper motor rotation
 */
void EchoRadar_MotorTimerHandler(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if(echoRadar.counter >= echoRadar.stepAngle) {
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <EchoRadar_MotorTimerHandler+0x38>)
 8001266:	885b      	ldrh	r3, [r3, #2]
 8001268:	461a      	mov	r2, r3
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <EchoRadar_MotorTimerHandler+0x38>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	429a      	cmp	r2, r3
 8001272:	db05      	blt.n	8001280 <EchoRadar_MotorTimerHandler+0x20>
		EchoRadar_DisableMotor();
 8001274:	f7ff ffe2 	bl	800123c <EchoRadar_DisableMotor>
		echoRadar.counter = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <EchoRadar_MotorTimerHandler+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	805a      	strh	r2, [r3, #2]
	} else {
		StepMotorRotate(&motor);
		echoRadar.counter++;
	}
}
 800127e:	e008      	b.n	8001292 <EchoRadar_MotorTimerHandler+0x32>
		StepMotorRotate(&motor);
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <EchoRadar_MotorTimerHandler+0x3c>)
 8001282:	f000 fb17 	bl	80018b4 <StepMotorRotate>
		echoRadar.counter++;
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <EchoRadar_MotorTimerHandler+0x38>)
 8001288:	885b      	ldrh	r3, [r3, #2]
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b02      	ldr	r3, [pc, #8]	; (8001298 <EchoRadar_MotorTimerHandler+0x38>)
 8001290:	805a      	strh	r2, [r3, #2]
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000028c 	.word	0x2000028c
 800129c:	200014f4 	.word	0x200014f4

080012a0 <EncoderInit>:

#include "encoder.h"


/* Initialize encoder */
void EncoderInit(Encoder_HandleTypeDef *encoder) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	encoder->buttonState = 0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	771a      	strb	r2, [r3, #28]
	encoder->tumblerState = 1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	83da      	strh	r2, [r3, #30]
	encoder->tumbler_CLC_DT_last = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	encoder->tumblerStepCounter = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	encoder->buttonProgTime = HAL_GetTick();
 80012c4:	f001 fa28 	bl	8002718 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	621a      	str	r2, [r3, #32]
	encoder->tumbler_CLC_DT_last = 0;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	encoder->tumbler_CLC_DT_last |=
			(HAL_GPIO_ReadPin(encoder->CLK.GPIO, encoder->CLK.PIN) << 1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	4619      	mov	r1, r3
 80012e0:	4610      	mov	r0, r2
 80012e2:	f001 ff15 	bl	8003110 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	0059      	lsls	r1, r3, #1
	encoder->tumbler_CLC_DT_last |=
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	b24b      	sxtb	r3, r1
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	encoder->tumbler_CLC_DT_last |=
			(HAL_GPIO_ReadPin(encoder->DT.GPIO, encoder->CLK.PIN) << 0);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	889b      	ldrh	r3, [r3, #4]
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f001 feff 	bl	8003110 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
	encoder->tumbler_CLC_DT_last |=
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800131c:	b2db      	uxtb	r3, r3
 800131e:	b25a      	sxtb	r2, r3
 8001320:	b24b      	sxtb	r3, r1
 8001322:	4313      	orrs	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2da      	uxtb	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	encoder->tumbler_TIM_CounterLast = 30000;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f247 5230 	movw	r2, #30000	; 0x7530
 8001334:	84da      	strh	r2, [r3, #38]	; 0x26
	if(encoder->tumblerEncoder_TIM->Instance) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <EncoderInit+0xb8>
		encoder->tumblerEncoder_TIM->Instance->CNT = 30000;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f247 5230 	movw	r2, #30000	; 0x7530
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Encoder_Start(encoder->tumblerEncoder_TIM, TIM_CHANNEL_ALL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	213c      	movs	r1, #60	; 0x3c
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fcc4 	bl	8004ce0 <HAL_TIM_Encoder_Start>
	}
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <EncoderTumblerTimerInterrupt>:

/* Reads encoder tumbler state via timer, configured to encoder
 * mode. Refreshes encoder->tumblerState on every second pulse.
 * Should be called in third party timer with frequency ~ 1 kHz
 */
void EncoderTumblerTimerInterrupt(Encoder_HandleTypeDef *encoder) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	uint16_t TIM_Counter = encoder->tumblerEncoder_TIM->Instance->CNT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	81fb      	strh	r3, [r7, #14]
	//uint16_t TIM_Counter = TIM2->CNT;
	if(TIM_Counter != encoder->tumbler_TIM_CounterLast) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001376:	b29b      	uxth	r3, r3
 8001378:	89fa      	ldrh	r2, [r7, #14]
 800137a:	429a      	cmp	r2, r3
 800137c:	d03f      	beq.n	80013fe <EncoderTumblerTimerInterrupt+0x9e>
		if(TIM_Counter > encoder->tumbler_TIM_CounterLast) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001382:	b29b      	uxth	r3, r3
 8001384:	89fa      	ldrh	r2, [r7, #14]
 8001386:	429a      	cmp	r2, r3
 8001388:	d91c      	bls.n	80013c4 <EncoderTumblerTimerInterrupt+0x64>
			encoder->tumblerStepCounter += TIM_Counter - encoder->tumbler_TIM_CounterLast;
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001390:	b292      	uxth	r2, r2
 8001392:	1a99      	subs	r1, r3, r2
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800139a:	b2da      	uxtb	r2, r3
 800139c:	b2cb      	uxtb	r3, r1
 800139e:	4413      	add	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			/* one pas of encoder rotation creates 2 pulses
			 * so we count 2 pulses to update encoder->tumblerState
			 */
			if(encoder->tumblerStepCounter >= 2) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d924      	bls.n	80013fe <EncoderTumblerTimerInterrupt+0x9e>
				EncoderTomblerInc(encoder);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f87c 	bl	80014b2 <EncoderTomblerInc>
				encoder->tumblerStepCounter = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80013c2:	e01c      	b.n	80013fe <EncoderTumblerTimerInterrupt+0x9e>
			}
		} else {
			encoder->tumblerStepCounter += encoder->tumbler_TIM_CounterLast - TIM_Counter;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	1ad1      	subs	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	b2cb      	uxtb	r3, r1
 80013da:	4413      	add	r3, r2
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if(encoder->tumblerStepCounter >= 2) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d906      	bls.n	80013fe <EncoderTumblerTimerInterrupt+0x9e>
				EncoderTomblerDec(encoder);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f877 	bl	80014e4 <EncoderTomblerDec>
				encoder->tumblerStepCounter = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
		}
	}
	encoder->tumbler_TIM_CounterLast = TIM_Counter;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	89fa      	ldrh	r2, [r7, #14]
 8001402:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <EncoderButtonExternInterrupt>:

/* Reads encoder button state and refreshes encoder->buttonState.
 * Should be called in external interrupt.
 */
void EncoderButtonExternInterrupt(Encoder_HandleTypeDef *encoder) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - encoder->buttonProgTime > ENCODER_BUTTON_PROGTIME_DELAY) {
 8001414:	f001 f980 	bl	8002718 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001424:	d912      	bls.n	800144c <EncoderButtonExternInterrupt+0x40>
		if(HAL_GPIO_ReadPin(encoder->SW.GPIO, encoder->SW.PIN)) {
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	8a9b      	ldrh	r3, [r3, #20]
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f001 fe6d 	bl	8003110 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <EncoderButtonExternInterrupt+0x36>
			EncoderTougleButton(encoder);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f823 	bl	8001488 <EncoderTougleButton>
		}
		encoder->buttonProgTime = HAL_GetTick();
 8001442:	f001 f969 	bl	8002718 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	621a      	str	r2, [r3, #32]
	}
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <EncoderGetTublerState>:

/* Returns tumblerState */
int16_t EncoderGetTublerState(Encoder_HandleTypeDef *encoder) {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	return encoder->tumblerState;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8bdb      	ldrh	r3, [r3, #30]
 8001460:	b21b      	sxth	r3, r3
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <EncoderGetButtonState>:

/* Returns buttonState */
uint8_t EncoderGetButtonState(Encoder_HandleTypeDef *encoder) {
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return encoder->buttonState;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7f1b      	ldrb	r3, [r3, #28]
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <EncoderTougleButton>:

/* Toggles encoder->buttonState */
void EncoderTougleButton(Encoder_HandleTypeDef *encoder) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	encoder->buttonState = encoder->buttonState ? 0 : 1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7f1b      	ldrb	r3, [r3, #28]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	771a      	strb	r2, [r3, #28]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <EncoderTomblerInc>:

/* Increments encoder->tumblerState, if it is lower then ENCODER_MAX_VAL */
void EncoderTomblerInc(Encoder_HandleTypeDef *encoder) {
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	if(encoder->tumblerState < ENCODER_MAX_VAL) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	8bdb      	ldrh	r3, [r3, #30]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c4:	da08      	bge.n	80014d8 <EncoderTomblerInc+0x26>
		encoder->tumblerState++;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	8bdb      	ldrh	r3, [r3, #30]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	83da      	strh	r2, [r3, #30]
	}
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <EncoderTomblerDec>:

/* Decrements encoder->tumblerState, if it is higher then ENCODER_MIN_VAL */
void EncoderTomblerDec(Encoder_HandleTypeDef *encoder) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if(encoder->tumblerState > ENCODER_MIN_VAL) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	8bdb      	ldrh	r3, [r3, #30]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	dd08      	ble.n	8001508 <EncoderTomblerDec+0x24>
			encoder->tumblerState--;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8bdb      	ldrh	r3, [r3, #30]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	83da      	strh	r2, [r3, #30]
		}
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HCSR04_GetDistance>:
 *      Author: ar725
 */
#include "hcsr04.h"

/* Returns current saved distance */
uint32_t HCSR04_GetDistance(HCSR04_HandleTypeDef *hcsr04) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	return hcsr04->distance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HCSR04_Init>:

/* Initializes HCSR04_HandleTypeDef structure fields */
void HCSR04_Init(HCSR04_HandleTypeDef *hcsr) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	hcsr->isFirstCaptured = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	751a      	strb	r2, [r3, #20]
	hcsr->distance = 0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
	DWT_Init();
 8001540:	f7ff fc60 	bl	8000e04 <DWT_Init>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HCSR04_ReadDistance>:

/* Begins distance reading routine */
void HCSR04_ReadDistance(HCSR04_HandleTypeDef *hcsr) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hcsr->trig.GPIO, hcsr->trig.PIN, GPIO_PIN_SET);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f001 fdee 	bl	8003140 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f7ff fc6d 	bl	8000e44 <DWT_Delay>
	HAL_GPIO_WritePin(hcsr->trig.GPIO, hcsr->trig.PIN, GPIO_PIN_RESET);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	f001 fde3 	bl	8003140 <HAL_GPIO_WritePin>

	HAL_TIM_IC_Start_IT(hcsr->htim, hcsr->channel);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f003 fa3a 	bl	8004a00 <HAL_TIM_IC_Start_IT>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	0000      	movs	r0, r0
	...

08001598 <HCSR04_CaptureCallback>:

/* Calculates and saves in hcsr->distance distance in cm */
void HCSR04_CaptureCallback(TIM_HandleTypeDef *htim, HCSR04_HandleTypeDef *hcsr, void (*callback)(void)) {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	if(htim != hcsr->htim) {
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	f040 812d 	bne.w	800180a <HCSR04_CaptureCallback+0x272>
	}
	/* if the interrupt source is channel_x;
	 * conversion to HAL_TIM_ActiveChannel;
	 * channel_x = channel/4 + 1
	 */
	if (htim->Channel == hcsr->channel/4 + 1) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	7f1b      	ldrb	r3, [r3, #28]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	429a      	cmp	r2, r3
 80015c4:	f040 8122 	bne.w	800180c <HCSR04_CaptureCallback+0x274>

			/* if the first value is not captured */
			if (hcsr->isFirstCaptured == 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	7d1b      	ldrb	r3, [r3, #20]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d171      	bne.n	80016b6 <HCSR04_CaptureCallback+0x11e>
				/* read the first value */
				hcsr->IC_firstValue = HAL_TIM_ReadCapturedValue(htim, hcsr->channel);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f003 fe2c 	bl	8005238 <HAL_TIM_ReadCapturedValue>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	619a      	str	r2, [r3, #24]
				/* set the first captured as true */
				hcsr->isFirstCaptured = 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2201      	movs	r2, #1
 80015ea:	751a      	strb	r2, [r3, #20]
				/* Now change the polarity to falling edge */
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, hcsr->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <HCSR04_CaptureCallback+0x70>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020a 	bic.w	r2, r2, #10
 8001604:	621a      	str	r2, [r3, #32]
 8001606:	e023      	b.n	8001650 <HCSR04_CaptureCallback+0xb8>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b04      	cmp	r3, #4
 8001610:	d108      	bne.n	8001624 <HCSR04_CaptureCallback+0x8c>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	e015      	b.n	8001650 <HCSR04_CaptureCallback+0xb8>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	7b1b      	ldrb	r3, [r3, #12]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b08      	cmp	r3, #8
 800162c:	d108      	bne.n	8001640 <HCSR04_CaptureCallback+0xa8>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800163c:	621a      	str	r2, [r3, #32]
 800163e:	e007      	b.n	8001650 <HCSR04_CaptureCallback+0xb8>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800164e:	621a      	str	r2, [r3, #32]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	7b1b      	ldrb	r3, [r3, #12]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HCSR04_CaptureCallback+0xd4>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0202 	orr.w	r2, r2, #2
 8001668:	621a      	str	r2, [r3, #32]
 800166a:	e0cf      	b.n	800180c <HCSR04_CaptureCallback+0x274>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b04      	cmp	r3, #4
 8001674:	d108      	bne.n	8001688 <HCSR04_CaptureCallback+0xf0>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0220 	orr.w	r2, r2, #32
 8001684:	621a      	str	r2, [r3, #32]
 8001686:	e0c1      	b.n	800180c <HCSR04_CaptureCallback+0x274>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	7b1b      	ldrb	r3, [r3, #12]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b08      	cmp	r3, #8
 8001690:	d108      	bne.n	80016a4 <HCSR04_CaptureCallback+0x10c>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e0b3      	b.n	800180c <HCSR04_CaptureCallback+0x274>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a1a      	ldr	r2, [r3, #32]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	e0aa      	b.n	800180c <HCSR04_CaptureCallback+0x274>
			} else

				/* if the first is already captured */
				if (hcsr->isFirstCaptured == 1) {
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	7d1b      	ldrb	r3, [r3, #20]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f040 80a5 	bne.w	800180c <HCSR04_CaptureCallback+0x274>
				/* read second value */
				uint32_t IC_secandValue = HAL_TIM_ReadCapturedValue(htim, hcsr->channel);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f003 fdb4 	bl	8005238 <HAL_TIM_ReadCapturedValue>
 80016d0:	6178      	str	r0, [r7, #20]
				/* reset the counter */
				__HAL_TIM_SET_COUNTER(htim, 0);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

				if (IC_secandValue > hcsr->IC_firstValue) {
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d906      	bls.n	80016f2 <HCSR04_CaptureCallback+0x15a>
					hcsr->distance = IC_secandValue - hcsr->IC_firstValue;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	1ad2      	subs	r2, r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	e00d      	b.n	800170e <HCSR04_CaptureCallback+0x176>
				} else

				if (hcsr->IC_firstValue > IC_secandValue) {
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d208      	bcs.n	800170e <HCSR04_CaptureCallback+0x176>
					hcsr->distance = (0xffff - hcsr->IC_firstValue) + IC_secandValue;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001708:	33ff      	adds	r3, #255	; 0xff
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	6113      	str	r3, [r2, #16]
				}

				/* turns value from us to cm */
				hcsr->distance *= .034/2;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fefe 	bl	8000514 <__aeabi_ui2d>
 8001718:	a33f      	add	r3, pc, #252	; (adr r3, 8001818 <HCSR04_CaptureCallback+0x280>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	4618      	mov	r0, r3
 8001728:	4621      	mov	r1, r4
 800172a:	f7ff f97f 	bl	8000a2c <__aeabi_d2uiz>
 800172e:	4602      	mov	r2, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	611a      	str	r2, [r3, #16]
				/* set it back to false */
				hcsr->isFirstCaptured = 0;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2200      	movs	r2, #0
 8001738:	751a      	strb	r2, [r3, #20]
				/* set polarity to rising edge */
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, hcsr->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	7b1b      	ldrb	r3, [r3, #12]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d108      	bne.n	8001756 <HCSR04_CaptureCallback+0x1be>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020a 	bic.w	r2, r2, #10
 8001752:	621a      	str	r2, [r3, #32]
 8001754:	e023      	b.n	800179e <HCSR04_CaptureCallback+0x206>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	7b1b      	ldrb	r3, [r3, #12]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b04      	cmp	r3, #4
 800175e:	d108      	bne.n	8001772 <HCSR04_CaptureCallback+0x1da>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	e015      	b.n	800179e <HCSR04_CaptureCallback+0x206>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b08      	cmp	r3, #8
 800177a:	d108      	bne.n	800178e <HCSR04_CaptureCallback+0x1f6>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	e007      	b.n	800179e <HCSR04_CaptureCallback+0x206>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800179c:	621a      	str	r2, [r3, #32]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <HCSR04_CaptureCallback+0x21e>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a12      	ldr	r2, [r2, #32]
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	e01d      	b.n	80017f2 <HCSR04_CaptureCallback+0x25a>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d106      	bne.n	80017ce <HCSR04_CaptureCallback+0x236>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a12      	ldr	r2, [r2, #32]
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	e011      	b.n	80017f2 <HCSR04_CaptureCallback+0x25a>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	7b1b      	ldrb	r3, [r3, #12]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d106      	bne.n	80017e6 <HCSR04_CaptureCallback+0x24e>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a12      	ldr	r2, [r2, #32]
 80017e2:	621a      	str	r2, [r3, #32]
 80017e4:	e005      	b.n	80017f2 <HCSR04_CaptureCallback+0x25a>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a12      	ldr	r2, [r2, #32]
 80017f0:	621a      	str	r2, [r3, #32]

				HAL_TIM_IC_Stop_IT(hcsr->htim, hcsr->channel);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	7b1b      	ldrb	r3, [r3, #12]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	4610      	mov	r0, r2
 8001800:	f003 f96c 	bl	8004adc <HAL_TIM_IC_Stop_IT>
				callback();
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e000      	b.n	800180c <HCSR04_CaptureCallback+0x274>
		return;
 800180a:	bf00      	nop
			}
		}
}
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	b020c49c 	.word	0xb020c49c
 800181c:	3f916872 	.word	0x3f916872

08001820 <StepMotorInit>:
 *  Created on: Jun 6, 2020
 *      Author: ar725
 */
#include "step_motor.h"

void StepMotorInit(StepMotor_HandleTypeDef *motor) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	motor->direction = 1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2020 	strb.w	r2, [r3, #32]
	motor->phase = 1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	motor->position = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	859a      	strh	r2, [r3, #44]	; 0x2c
	motor->counter = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f8a3 2fce 	strh.w	r2, [r3, #4046]	; 0xfce
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <StepMotorWrite>:

/* Sets the state of the step motor by ruling on 4 сoils */
void StepMotorWrite(StepMotor_HandleTypeDef *motor, GPIO_PinState ps1,
												GPIO_PinState ps2,
												GPIO_PinState ps3,
												GPIO_PinState ps4) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	4608      	mov	r0, r1
 800185c:	4611      	mov	r1, r2
 800185e:	461a      	mov	r2, r3
 8001860:	4603      	mov	r3, r0
 8001862:	70fb      	strb	r3, [r7, #3]
 8001864:	460b      	mov	r3, r1
 8001866:	70bb      	strb	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(motor->p1.GPIO, motor->p1.PIN, ps1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	889b      	ldrh	r3, [r3, #4]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	4619      	mov	r1, r3
 8001878:	f001 fc62 	bl	8003140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->p2.GPIO, motor->p2.PIN, ps2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6898      	ldr	r0, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	899b      	ldrh	r3, [r3, #12]
 8001884:	78ba      	ldrb	r2, [r7, #2]
 8001886:	4619      	mov	r1, r3
 8001888:	f001 fc5a 	bl	8003140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->p3.GPIO, motor->p3.PIN, ps3);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6918      	ldr	r0, [r3, #16]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8a9b      	ldrh	r3, [r3, #20]
 8001894:	787a      	ldrb	r2, [r7, #1]
 8001896:	4619      	mov	r1, r3
 8001898:	f001 fc52 	bl	8003140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->p4.GPIO, motor->p4.PIN, ps4);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6998      	ldr	r0, [r3, #24]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8b9b      	ldrh	r3, [r3, #28]
 80018a4:	7c3a      	ldrb	r2, [r7, #16]
 80018a6:	4619      	mov	r1, r3
 80018a8:	f001 fc4a 	bl	8003140 <HAL_GPIO_WritePin>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <StepMotorRotate>:
 * 1: 1 0 0 0
 * 2: 0 1 0 0
 * 3: 0 0 1 0
 * 4: 0 0 0 1
 */
void StepMotorRotate(StepMotor_HandleTypeDef *motor) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	6078      	str	r0, [r7, #4]
	motor->states[motor->counter] = motor->direction;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8b3 3fce 	ldrh.w	r3, [r3, #4046]	; 0xfce
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	440b      	add	r3, r1
 80018ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	if(motor->position == -1000) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80018d8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80018dc:	d104      	bne.n	80018e8 <StepMotorRotate+0x34>
		motor->position = motor->position;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	motor->counter++;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8b3 3fce 	ldrh.w	r3, [r3, #4046]	; 0xfce
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8a3 2fce 	strh.w	r2, [r3, #4046]	; 0xfce
	switch(motor->phase) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018fe:	3b01      	subs	r3, #1
 8001900:	2b03      	cmp	r3, #3
 8001902:	d82f      	bhi.n	8001964 <StepMotorRotate+0xb0>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <StepMotorRotate+0x58>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	0800191d 	.word	0x0800191d
 8001910:	0800192f 	.word	0x0800192f
 8001914:	08001941 	.word	0x08001941
 8001918:	08001953 	.word	0x08001953
	case 1:
		StepMotorWrite(motor, 1, 0, 0, 0);
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	2200      	movs	r2, #0
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff93 	bl	8001852 <StepMotorWrite>
	break;
 800192c:	e022      	b.n	8001974 <StepMotorRotate+0xc0>
	case 2:
		StepMotorWrite(motor, 0, 1, 0, 0);
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	2201      	movs	r2, #1
 8001936:	2100      	movs	r1, #0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff8a 	bl	8001852 <StepMotorWrite>
	break;
 800193e:	e019      	b.n	8001974 <StepMotorRotate+0xc0>
	case 3:
		StepMotorWrite(motor, 0, 0, 1, 0);
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff81 	bl	8001852 <StepMotorWrite>
	break;
 8001950:	e010      	b.n	8001974 <StepMotorRotate+0xc0>
	case 4:
		StepMotorWrite(motor, 0, 0, 0, 1);
 8001952:	2301      	movs	r3, #1
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff78 	bl	8001852 <StepMotorWrite>
	break;
 8001962:	e007      	b.n	8001974 <StepMotorRotate+0xc0>
	default:
		StepMotorWrite(motor, 0, 0, 0, 0);
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff6f 	bl	8001852 <StepMotorWrite>
	}

	if(motor->direction == 1) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d111      	bne.n	80019a2 <StepMotorRotate+0xee>
		motor->phase++;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001984:	3301      	adds	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		motor->position++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001994:	b29b      	uxth	r3, r3
 8001996:	3301      	adds	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b21a      	sxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	859a      	strh	r2, [r3, #44]	; 0x2c
 80019a0:	e010      	b.n	80019c4 <StepMotorRotate+0x110>
	} else {
		motor->phase--;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		motor->position--;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	if(motor->phase >= 5) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d903      	bls.n	80019d6 <StepMotorRotate+0x122>
		motor->phase = 1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	if(motor->phase <= 0) {
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <StepMotorRotate+0x134>
		motor->phase = 4;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2204      	movs	r2, #4
 80019e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	timer = 0;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <main+0x9c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fc:	f000 fe27 	bl	800264e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a00:	f000 f852 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a04:	f000 fa82 	bl	8001f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a08:	f000 fa62 	bl	8001ed0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a0c:	f000 fa30 	bl	8001e70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001a10:	f000 f8fc 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a14:	f000 f954 	bl	8001cc0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a18:	f000 f8b8 	bl	8001b8c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a1c:	f000 f99e 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM6_Init();
 8001a20:	f000 f9f0 	bl	8001e04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  InitDevices();
 8001a24:	f000 faea 	bl	8001ffc <InitDevices>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DMA_USART_Init();
 8001a28:	f7ff f9c0 	bl	8000dac <DMA_USART_Init>
  EncoderInit(&encoder);
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <main+0xa0>)
 8001a2e:	f7ff fc37 	bl	80012a0 <EncoderInit>
  HAL_TIM_Base_Start(&htim2);
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <main+0xa4>)
 8001a34:	f002 ff0e 	bl	8004854 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a38:	4816      	ldr	r0, [pc, #88]	; (8001a94 <main+0xa4>)
 8001a3a:	f002 ff61 	bl	8004900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8001a3e:	4816      	ldr	r0, [pc, #88]	; (8001a98 <main+0xa8>)
 8001a40:	f002 ff08 	bl	8004854 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001a44:	4814      	ldr	r0, [pc, #80]	; (8001a98 <main+0xa8>)
 8001a46:	f002 ff5b 	bl	8004900 <HAL_TIM_Base_Start_IT>
  HCSR04_Init(&hcsr);
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <main+0xac>)
 8001a4c:	f7ff fd6e 	bl	800152c <HCSR04_Init>
  StepMotorInit(&motor);
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <main+0xb0>)
 8001a52:	f7ff fee5 	bl	8001820 <StepMotorInit>
  EchoRadar_Init();
 8001a56:	f7ff fab3 	bl	8000fc0 <EchoRadar_Init>
  uint32_t counter1 = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  //==================================================================================WHILE========
  while (1)
  {
  	//HCSR04_ReadDistance(&hcsr);
  	EchoRadar_Precessing();
 8001a5e:	f7ff fadb 	bl	8001018 <EchoRadar_Precessing>
  			motor.direction = 0;
  		} else if(motor.position < -1050) {
  			motor.direction = 1;
  		}*/
  	//StepMotorRotate(&motor);
  	val = EncoderGetTublerState(&encoder);
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <main+0xa0>)
 8001a64:	f7ff fcf6 	bl	8001454 <EncoderGetTublerState>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <main+0xb4>)
 8001a6e:	801a      	strh	r2, [r3, #0]
  	/*if(counter1%10 == 0) {
  		DMA_USART_Printf("{TEST1=%d}{TEST2=%d}{%d}\r\n", motor.direction,
  				val, motor.position);
  		//HAL_Delay(val*10);
  	}*/
  	EchoRadar_SendMessage();
 8001a70:	f7ff fa38 	bl	8000ee4 <EchoRadar_SendMessage>

  	counter1++;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	607b      	str	r3, [r7, #4]
  	//StepMotorRotate(&motor);
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f001 fb76 	bl	8003170 <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f000 fe53 	bl	8002730 <HAL_Delay>
  	EchoRadar_Precessing();
 8001a8a:	e7e8      	b.n	8001a5e <main+0x6e>
 8001a8c:	20001310 	.word	0x20001310
 8001a90:	20001360 	.word	0x20001360
 8001a94:	200014b4 	.word	0x200014b4
 8001a98:	20001418 	.word	0x20001418
 8001a9c:	20001498 	.word	0x20001498
 8001aa0:	200014f4 	.word	0x200014f4
 8001aa4:	20001414 	.word	0x20001414

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b0      	sub	sp, #192	; 0xc0
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ab2:	2244      	movs	r2, #68	; 0x44
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fc29 	bl	800630e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2268      	movs	r2, #104	; 0x68
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fc1b 	bl	800630e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001afc:	230f      	movs	r3, #15
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b02:	2307      	movs	r3, #7
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fcf1 	bl	8003500 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b24:	f000 fac0 	bl	80020a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b40:	2103      	movs	r1, #3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 f8fc 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b4e:	f000 faab 	bl	80020a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001b52:	2342      	movs	r3, #66	; 0x42
 8001b54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 faf1 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b6c:	f000 fa9c 	bl	80020a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b74:	f001 fc6e 	bl	8003454 <HAL_PWREx_ControlVoltageScaling>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001b7e:	f000 fa93 	bl	80020a8 <Error_Handler>
  }
}
 8001b82:	bf00      	nop
 8001b84:	37c0      	adds	r7, #192	; 0xc0
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <MX_I2C1_Init+0x78>)
 8001b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <MX_I2C1_Init+0x7c>)
 8001b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bc8:	f001 fb0f 	bl	80031ea <HAL_I2C_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bd2:	f000 fa69 	bl	80020a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bda:	f001 fb95 	bl	8003308 <HAL_I2CEx_ConfigAnalogFilter>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f000 fa60 	bl	80020a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bec:	f001 fbd7 	bl	800339e <HAL_I2CEx_ConfigDigitalFilter>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bf6:	f000 fa57 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20001314 	.word	0x20001314
 8001c04:	40005400 	.word	0x40005400
 8001c08:	107075b0 	.word	0x107075b0

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fb77 	bl	800630e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <MX_TIM1_Init+0xb0>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001c82:	f002 ff9b 	bl	8004bbc <HAL_TIM_Encoder_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001c8c:	f000 fa0c 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_TIM1_Init+0xac>)
 8001ca2:	f003 fd75 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001cac:	f000 f9fc 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20001458 	.word	0x20001458
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001ce8:	2263      	movs	r2, #99	; 0x63
 8001cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5900;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001cf4:	f241 720c 	movw	r2, #5900	; 0x170c
 8001cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001d08:	f002 fd78 	bl	80047fc <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d12:	f000 f9c9 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001d24:	f003 f9ce 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d2e:	f000 f9bb 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d32:	2320      	movs	r3, #32
 8001d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001d40:	f003 fd26 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d4a:	f000 f9ad 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200014b4 	.word	0x200014b4

08001d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <MX_TIM3_Init+0xa4>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d82:	223b      	movs	r2, #59	; 0x3b
 8001d84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001da0:	4816      	ldr	r0, [pc, #88]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001da2:	f002 fe02 	bl	80049aa <HAL_TIM_IC_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001dac:	f000 f97c 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001dc0:	f003 fce6 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001dca:	f000 f96d 	bl	80020a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_TIM3_Init+0xa0>)
 8001de6:	f003 f8d1 	bl	8004f8c <HAL_TIM_IC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001df0:	f000 f95a 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000138c 	.word	0x2000138c
 8001e00:	40000400 	.word	0x40000400

08001e04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <MX_TIM6_Init+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e1c:	2263      	movs	r2, #99	; 0x63
 8001e1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1300;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e28:	f240 5214 	movw	r2, #1300	; 0x514
 8001e2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e36:	f002 fce1 	bl	80047fc <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e40:	f000 f932 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e44:	2320      	movs	r3, #32
 8001e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_TIM6_Init+0x64>)
 8001e52:	f003 fc9d 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e5c:	f000 f924 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20001418 	.word	0x20001418
 8001e6c:	40001000 	.word	0x40001000

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <MX_USART2_UART_Init+0x5c>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f003 fcf8 	bl	80058a8 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ebe:	f000 f8f3 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200024c4 	.word	0x200024c4
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_DMA_Init+0x38>)
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <MX_DMA_Init+0x38>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6493      	str	r3, [r2, #72]	; 0x48
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_DMA_Init+0x38>)
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2011      	movs	r0, #17
 8001ef4:	f000 fd19 	bl	800292a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ef8:	2011      	movs	r0, #17
 8001efa:	f000 fd32 	bl	8002962 <HAL_NVIC_EnableIRQ>

}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MX_GPIO_Init+0xe4>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f001 f8e5 	bl	8003140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8001f7c:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <MX_GPIO_Init+0xe8>)
 8001f7e:	f001 f8df 	bl	8003140 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f82:	2320      	movs	r3, #32
 8001f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4619      	mov	r1, r3
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f000 ff3e 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_GPIO_Init+0xec>)
 8001fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <MX_GPIO_Init+0xe8>)
 8001fb6:	f000 ff31 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
 8001fba:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 8001fbe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <MX_GPIO_Init+0xe8>)
 8001fd4:	f000 ff22 	bl	8002e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2028      	movs	r0, #40	; 0x28
 8001fde:	f000 fca4 	bl	800292a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fe2:	2028      	movs	r0, #40	; 0x28
 8001fe4:	f000 fcbd 	bl	8002962 <HAL_NVIC_EnableIRQ>

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	10110000 	.word	0x10110000

08001ffc <InitDevices>:

/* USER CODE BEGIN 4 */
void InitDevices(void) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	encoder.tumblerEncoder_TIM = &htim1;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <InitDevices+0x70>)
 8002002:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <InitDevices+0x74>)
 8002004:	619a      	str	r2, [r3, #24]

	encoder.SW.GPIO = GPIOB;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <InitDevices+0x70>)
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <InitDevices+0x78>)
 800200a:	611a      	str	r2, [r3, #16]
	encoder.SW.PIN = GPIO_PIN_10;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <InitDevices+0x70>)
 800200e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002012:	829a      	strh	r2, [r3, #20]

	hcsr.trig.GPIO = GPIOB;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <InitDevices+0x7c>)
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <InitDevices+0x78>)
 8002018:	601a      	str	r2, [r3, #0]
	hcsr.trig.PIN = GPIO_PIN_5;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <InitDevices+0x7c>)
 800201c:	2220      	movs	r2, #32
 800201e:	809a      	strh	r2, [r3, #4]
	hcsr.htim = &htim3;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <InitDevices+0x7c>)
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <InitDevices+0x80>)
 8002024:	609a      	str	r2, [r3, #8]
	hcsr.channel = TIM_CHANNEL_1;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <InitDevices+0x7c>)
 8002028:	2200      	movs	r2, #0
 800202a:	731a      	strb	r2, [r3, #12]

	motor.p1.GPIO = GPIOB;
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <InitDevices+0x84>)
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <InitDevices+0x78>)
 8002030:	601a      	str	r2, [r3, #0]
	motor.p1.PIN = GPIO_PIN_3;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <InitDevices+0x84>)
 8002034:	2208      	movs	r2, #8
 8002036:	809a      	strh	r2, [r3, #4]
	motor.p2.GPIO = GPIOB;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <InitDevices+0x84>)
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <InitDevices+0x78>)
 800203c:	609a      	str	r2, [r3, #8]
	motor.p2.PIN = GPIO_PIN_4;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <InitDevices+0x84>)
 8002040:	2210      	movs	r2, #16
 8002042:	819a      	strh	r2, [r3, #12]
	motor.p3.GPIO = GPIOB;
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <InitDevices+0x84>)
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <InitDevices+0x78>)
 8002048:	611a      	str	r2, [r3, #16]
	motor.p3.PIN = GPIO_PIN_9;
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <InitDevices+0x84>)
 800204c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002050:	829a      	strh	r2, [r3, #20]
	motor.p4.GPIO = GPIOB;
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <InitDevices+0x84>)
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <InitDevices+0x78>)
 8002056:	619a      	str	r2, [r3, #24]
	motor.p4.PIN = GPIO_PIN_8;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <InitDevices+0x84>)
 800205a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205e:	839a      	strh	r2, [r3, #28]

}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20001360 	.word	0x20001360
 8002070:	20001458 	.word	0x20001458
 8002074:	48000400 	.word	0x48000400
 8002078:	20001498 	.word	0x20001498
 800207c:	2000138c 	.word	0x2000138c
 8002080:	200014f4 	.word	0x200014f4

08002084 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	HCSR04_CaptureCallback(htim, &hcsr, EchoRadar_EnableMotor);
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x1c>)
 800208e:	4905      	ldr	r1, [pc, #20]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fa81 	bl	8001598 <HCSR04_CaptureCallback>
	//EchoRadar_CaptureCallbackHandler(htim);
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08001141 	.word	0x08001141
 80020a4:	20001498 	.word	0x20001498

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_MspInit+0x44>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_MspInit+0x44>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_MspInit+0x44>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_MspInit+0x44>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_MspInit+0x44>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_MspInit+0x44>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_I2C_MspInit+0xb8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d145      	bne.n	80021ae <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002158:	2312      	movs	r3, #18
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215c:	2301      	movs	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002164:	2304      	movs	r3, #4
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002172:	f000 fe53 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217a:	2312      	movs	r3, #18
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002186:	2304      	movs	r3, #4
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_I2C_MspInit+0xc0>)
 8002192:	f000 fe43 	bl	8002e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 800219c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_I2C_MspInit+0xbc>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40005400 	.word	0x40005400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400

080021c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d131      	bne.n	800224a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 80021ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f0:	6613      	str	r3, [r2, #96]	; 0x60
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002220:	2301      	movs	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002236:	f000 fdf1 	bl	8002e1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	201b      	movs	r0, #27
 8002240:	f000 fb73 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002244:	201b      	movs	r0, #27
 8002246:	f000 fb8c 	bl	8002962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	; 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d114      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	201c      	movs	r0, #28
 800228c:	f000 fb4d 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002290:	201c      	movs	r0, #28
 8002292:	f000 fb66 	bl	8002962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002296:	e018      	b.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 80022a8:	f043 0310 	orr.w	r3, r3, #16
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2036      	movs	r0, #54	; 0x36
 80022c0:	f000 fb33 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c4:	2036      	movs	r0, #54	; 0x36
 80022c6:	f000 fb4c 	bl	8002962 <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40001000 	.word	0x40001000

080022dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_TIM_IC_MspInit+0x8c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d130      	bne.n	8002360 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_TIM_IC_MspInit+0x90>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800233e:	2302      	movs	r3, #2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234c:	f000 fd66 	bl	8002e1c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	201d      	movs	r0, #29
 8002356:	f000 fae8 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800235a:	201d      	movs	r0, #29
 800235c:	f000 fb01 	bl	8002962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40000400 	.word	0x40000400
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <HAL_UART_MspInit+0xd0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d151      	bne.n	8002436 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <HAL_UART_MspInit+0xd4>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_UART_MspInit+0xd4>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_UART_MspInit+0xd4>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_UART_MspInit+0xd4>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_UART_MspInit+0xd4>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_UART_MspInit+0xd4>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023c2:	230c      	movs	r3, #12
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d2:	2307      	movs	r3, #7
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e0:	f000 fd1c 	bl	8002e1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_MspInit+0xd8>)
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_UART_MspInit+0xdc>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_UART_MspInit+0xd8>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_MspInit+0xd8>)
 80023f2:	2210      	movs	r2, #16
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_UART_MspInit+0xd8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_MspInit+0xd8>)
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_UART_MspInit+0xd8>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_UART_MspInit+0xd8>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_UART_MspInit+0xd8>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_UART_MspInit+0xd8>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800241a:	480b      	ldr	r0, [pc, #44]	; (8002448 <HAL_UART_MspInit+0xd8>)
 800241c:	f000 fabc 	bl	8002998 <HAL_DMA_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8002426:	f7ff fe3f 	bl	80020a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_UART_MspInit+0xd8>)
 800242e:	669a      	str	r2, [r3, #104]	; 0x68
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <HAL_UART_MspInit+0xd8>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004400 	.word	0x40004400
 8002444:	40021000 	.word	0x40021000
 8002448:	200013cc 	.word	0x200013cc
 800244c:	40020080 	.word	0x40020080

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 f926 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Channel7_IRQHandler+0x10>)
 80024b2:	f000 fb89 	bl	8002bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200013cc 	.word	0x200013cc

080024c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM1_CC_IRQHandler+0x10>)
 80024c6:	f002 fc42 	bl	8004d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20001458 	.word	0x20001458

080024d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	EncoderTumblerTimerInterrupt(&encoder);
 80024d8:	4803      	ldr	r0, [pc, #12]	; (80024e8 <TIM2_IRQHandler+0x14>)
 80024da:	f7fe ff41 	bl	8001360 <EncoderTumblerTimerInterrupt>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <TIM2_IRQHandler+0x18>)
 80024e0:	f002 fc35 	bl	8004d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20001360 	.word	0x20001360
 80024ec:	200014b4 	.word	0x200014b4

080024f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM3_IRQHandler+0x10>)
 80024f6:	f002 fc2a 	bl	8004d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000138c 	.word	0x2000138c

08002504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	EncoderButtonExternInterrupt(&encoder);
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <EXTI15_10_IRQHandler+0x18>)
 800250a:	f7fe ff7f 	bl	800140c <EncoderButtonExternInterrupt>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800250e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002512:	f000 fe47 	bl	80031a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20001360 	.word	0x20001360

08002520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StepMotorRotate(&motor);
	EchoRadar_MotorTimerHandler();
 8002524:	f7fe fe9c 	bl	8001260 <EchoRadar_MotorTimerHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <TIM6_DAC_IRQHandler+0x14>)
 800252a:	f002 fc10 	bl	8004d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20001418 	.word	0x20001418

08002538 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <_sbrk+0x50>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x16>
		heap_end = &end;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <_sbrk+0x50>)
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <_sbrk+0x54>)
 800254c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <_sbrk+0x50>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <_sbrk+0x50>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	466a      	mov	r2, sp
 800255e:	4293      	cmp	r3, r2
 8002560:	d907      	bls.n	8002572 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002562:	f003 fe91 	bl	8006288 <__errno>
 8002566:	4602      	mov	r2, r0
 8002568:	230c      	movs	r3, #12
 800256a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e006      	b.n	8002580 <_sbrk+0x48>
	}

	heap_end += incr;
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <_sbrk+0x50>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a03      	ldr	r2, [pc, #12]	; (8002588 <_sbrk+0x50>)
 800257c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20001304 	.word	0x20001304
 800258c:	20002550 	.word	0x20002550

08002590 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <SystemInit+0x64>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <SystemInit+0x64>)
 800259c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <SystemInit+0x68>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <SystemInit+0x68>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <SystemInit+0x68>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <SystemInit+0x68>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <SystemInit+0x68>)
 80025bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <SystemInit+0x68>)
 80025c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <SystemInit+0x68>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <SystemInit+0x68>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <SystemInit+0x68>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SystemInit+0x64>)
 80025e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e6:	609a      	str	r2, [r3, #8]
#endif
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00
 80025f8:	40021000 	.word	0x40021000

080025fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002600:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002602:	e003      	b.n	800260c <LoopCopyDataInit>

08002604 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002606:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002608:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800260a:	3104      	adds	r1, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <LoopForever+0xa>)
	ldr	r3, =_edata
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002610:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002612:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002614:	d3f6      	bcc.n	8002604 <CopyDataInit>
	ldr	r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002618:	e002      	b.n	8002620 <LoopFillZerobss>

0800261a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800261a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800261c:	f842 3b04 	str.w	r3, [r2], #4

08002620 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <LoopForever+0x16>)
	cmp	r2, r3
 8002622:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002624:	d3f9      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002626:	f7ff ffb3 	bl	8002590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f003 fe33 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262e:	f7ff f9df 	bl	80019f0 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002638:	08006bd8 	.word	0x08006bd8
	ldr	r0, =_sdata
 800263c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002640:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002644:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002648:	2000254c 	.word	0x2000254c

0800264c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_IRQHandler>

0800264e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f95b 	bl	8002914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265e:	2000      	movs	r0, #0
 8002660:	f000 f80e 	bl	8002680 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	e001      	b.n	8002674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002670:	f7ff fd22 	bl	80020b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002674:	79fb      	ldrb	r3, [r7, #7]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_InitTick+0x68>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d022      	beq.n	80026da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_InitTick+0x6c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_InitTick+0x68>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f968 	bl	800297e <HAL_SYSTICK_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d809      	bhi.n	80026ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ba:	2200      	movs	r2, #0
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	f04f 30ff 	mov.w	r0, #4294967295
 80026c2:	f000 f932 	bl	800292a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_InitTick+0x70>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e007      	b.n	80026de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e004      	b.n	80026de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e001      	b.n	80026de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000008 	.word	0x20000008
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x1c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_IncTick+0x20>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4413      	add	r3, r2
 8002702:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_IncTick+0x1c>)
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20002544 	.word	0x20002544
 8002714:	20000008 	.word	0x20000008

08002718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_GetTick+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20002544 	.word	0x20002544

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d004      	beq.n	8002754 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_Delay+0x40>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002754:	bf00      	nop
 8002756:	f7ff ffdf 	bl	8002718 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	429a      	cmp	r2, r3
 8002764:	d8f7      	bhi.n	8002756 <HAL_Delay+0x26>
  {
  }
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e0:	d301      	bcc.n	80028e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SysTick_Config+0x40>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ee:	210f      	movs	r1, #15
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f7ff ff8e 	bl	8002814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x40>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff29 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800293c:	f7ff ff3e 	bl	80027bc <__NVIC_GetPriorityGrouping>
 8002940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff ff8e 	bl	8002868 <NVIC_EncodePriority>
 800294c:	4602      	mov	r2, r0
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff5d 	bl	8002814 <__NVIC_SetPriority>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff31 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffa2 	bl	80028d0 <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e098      	b.n	8002adc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <HAL_DMA_Init+0x150>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d80f      	bhi.n	80029d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_DMA_Init+0x154>)
 80029be:	4413      	add	r3, r2
 80029c0:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_DMA_Init+0x158>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <HAL_DMA_Init+0x15c>)
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
 80029d4:	e00e      	b.n	80029f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_DMA_Init+0x160>)
 80029de:	4413      	add	r3, r2
 80029e0:	4a43      	ldr	r2, [pc, #268]	; (8002af0 <HAL_DMA_Init+0x158>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	009a      	lsls	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a42      	ldr	r2, [pc, #264]	; (8002afc <HAL_DMA_Init+0x164>)
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4e:	d039      	beq.n	8002ac4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <HAL_DMA_Init+0x15c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d11a      	bne.n	8002a90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a5a:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_DMA_Init+0x168>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f003 031c 	and.w	r3, r3, #28
 8002a66:	210f      	movs	r1, #15
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4924      	ldr	r1, [pc, #144]	; (8002b00 <HAL_DMA_Init+0x168>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_DMA_Init+0x168>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 031c 	and.w	r3, r3, #28
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	491d      	ldr	r1, [pc, #116]	; (8002b00 <HAL_DMA_Init+0x168>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
 8002a8e:	e019      	b.n	8002ac4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_DMA_Init+0x16c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f003 031c 	and.w	r3, r3, #28
 8002a9c:	210f      	movs	r1, #15
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4917      	ldr	r1, [pc, #92]	; (8002b04 <HAL_DMA_Init+0x16c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_DMA_Init+0x16c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f003 031c 	and.w	r3, r3, #28
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	4911      	ldr	r1, [pc, #68]	; (8002b04 <HAL_DMA_Init+0x16c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40020407 	.word	0x40020407
 8002aec:	bffdfff8 	.word	0xbffdfff8
 8002af0:	cccccccd 	.word	0xcccccccd
 8002af4:	40020000 	.word	0x40020000
 8002af8:	bffdfbf8 	.word	0xbffdfbf8
 8002afc:	40020400 	.word	0x40020400
 8002b00:	400200a8 	.word	0x400200a8
 8002b04:	400204a8 	.word	0x400204a8

08002b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Start_IT+0x20>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e04b      	b.n	8002bc0 <HAL_DMA_Start_IT+0xb8>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13a      	bne.n	8002bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f92b 	bl	8002dbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 020e 	orr.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 020a 	orr.w	r2, r2, #10
 8002b9e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	f003 031c 	and.w	r3, r3, #28
 8002be8:	2204      	movs	r2, #4
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d026      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x7a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d021      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f003 021c 	and.w	r2, r3, #28
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2104      	movs	r1, #4
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d071      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c40:	e06c      	b.n	8002d1c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 031c 	and.w	r3, r3, #28
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02e      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xec>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d029      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 020a 	bic.w	r2, r2, #10
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f003 021c 	and.w	r2, r3, #28
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2102      	movs	r1, #2
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d038      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cb2:	e033      	b.n	8002d1c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 031c 	and.w	r3, r3, #28
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02a      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x156>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 020e 	bic.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f003 021c 	and.w	r2, r3, #28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
}
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	460b      	mov	r3, r1
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_RegisterCallback+0x20>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e032      	b.n	8002dae <HAL_DMA_RegisterCallback+0x86>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d121      	bne.n	8002da0 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d81a      	bhi.n	8002d98 <HAL_DMA_RegisterCallback+0x70>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_DMA_RegisterCallback+0x40>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d81 	.word	0x08002d81
 8002d70:	08002d89 	.word	0x08002d89
 8002d74:	08002d91 	.word	0x08002d91
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8002d7e:	e011      	b.n	8002da4 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8002d86:	e00d      	b.n	8002da4 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8002d8e:	e009      	b.n	8002da4 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
           break;
 8002d9c:	bf00      	nop
 8002d9e:	e001      	b.n	8002da4 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 021c 	and.w	r2, r3, #28
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d108      	bne.n	8002e00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dfe:	e007      	b.n	8002e10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	e154      	b.n	80030d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8146 	beq.w	80030d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d00b      	beq.n	8002e64 <HAL_GPIO_Init+0x48>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d007      	beq.n	8002e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e58:	2b11      	cmp	r3, #17
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d130      	bne.n	8002ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 0201 	and.w	r2, r3, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0xea>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d123      	bne.n	8002f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a0 	beq.w	80030d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f90:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f94:	4a57      	ldr	r2, [pc, #348]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f9c:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa8:	4a53      	ldr	r2, [pc, #332]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd2:	d019      	beq.n	8003008 <HAL_GPIO_Init+0x1ec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a49      	ldr	r2, [pc, #292]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <HAL_GPIO_Init+0x1e8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a48      	ldr	r2, [pc, #288]	; (8003100 <HAL_GPIO_Init+0x2e4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00d      	beq.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a47      	ldr	r2, [pc, #284]	; (8003104 <HAL_GPIO_Init+0x2e8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <HAL_GPIO_Init+0x1e0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a46      	ldr	r2, [pc, #280]	; (8003108 <HAL_GPIO_Init+0x2ec>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_GPIO_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e008      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8002ff8:	2307      	movs	r3, #7
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e004      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003000:	2302      	movs	r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003008:	2300      	movs	r3, #0
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4093      	lsls	r3, r2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800301a:	4937      	ldr	r1, [pc, #220]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003028:	4b38      	ldr	r3, [pc, #224]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304c:	4a2f      	ldr	r2, [pc, #188]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a0:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a6:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f aea3 	bne.w	8002e2c <HAL_GPIO_Init+0x10>
  }
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40010000 	.word	0x40010000
 80030fc:	48000400 	.word	0x48000400
 8003100:	48000800 	.word	0x48000800
 8003104:	48000c00 	.word	0x48000c00
 8003108:	48001000 	.word	0x48001000
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e001      	b.n	8003132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800315c:	e002      	b.n	8003164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003188:	887a      	ldrh	r2, [r7, #2]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800318e:	e002      	b.n	8003196 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003190:	887a      	ldrh	r2, [r7, #2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	619a      	str	r2, [r3, #24]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f806 	bl	80031d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e081      	b.n	8003300 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe ff75 	bl	8002100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	; 0x24
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e006      	b.n	8003272 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003270:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d104      	bne.n	8003284 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003282:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	021a      	lsls	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	d138      	bne.n	8003390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003328:	2302      	movs	r3, #2
 800332a:	e032      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d139      	bne.n	8003428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033be:	2302      	movs	r3, #2
 80033c0:	e033      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	; 0x24
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_PWREx_GetVoltageRange+0x18>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40007000 	.word	0x40007000

08003454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003462:	d130      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d038      	beq.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2232      	movs	r2, #50	; 0x32
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003498:	e002      	b.n	80034a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3b01      	subs	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ac:	d102      	bne.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f2      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c0:	d110      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e00f      	b.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d007      	beq.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034dc:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40007000 	.word	0x40007000
 80034f8:	20000000 	.word	0x20000000
 80034fc:	431bde83 	.word	0x431bde83

08003500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f000 bc11 	b.w	8003d36 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003514:	4ba0      	ldr	r3, [pc, #640]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351e:	4b9e      	ldr	r3, [pc, #632]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80e4 	beq.w	80036fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_RCC_OscConfig+0x4c>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	f040 808b 	bne.w	800365a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b01      	cmp	r3, #1
 8003548:	f040 8087 	bne.w	800365a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_OscConfig+0x64>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e3e8      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_RCC_OscConfig+0x7e>
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	e005      	b.n	800358a <HAL_RCC_OscConfig+0x8a>
 800357e:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358a:	4293      	cmp	r3, r2
 800358c:	d223      	bcs.n	80035d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fd78 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e3c9      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a2:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4977      	ldr	r1, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c0:	4b75      	ldr	r3, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	4972      	ldr	r1, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
 80035d4:	e025      	b.n	8003622 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d6:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	496a      	ldr	r1, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	4965      	ldr	r1, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd38 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e389      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003622:	f000 fc6f 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a5a      	ldr	r2, [pc, #360]	; (800379c <HAL_RCC_OscConfig+0x29c>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	fa21 f303 	lsr.w	r3, r1, r3
 800363e:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x2a0>)
 8003640:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003642:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_RCC_OscConfig+0x2a4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f81a 	bl	8002680 <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d052      	beq.n	80036fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	e36d      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d032      	beq.n	80036c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003662:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800366e:	f7ff f853 	bl	8002718 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003676:	f7ff f84f 	bl	8002718 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e356      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	493a      	ldr	r1, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b2:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4935      	ldr	r1, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
 80036c6:	e01a      	b.n	80036fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036c8:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a32      	ldr	r2, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d4:	f7ff f820 	bl	8002718 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036dc:	f7ff f81c 	bl	8002718 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e323      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1dc>
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d073      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d005      	beq.n	800371c <HAL_RCC_OscConfig+0x21c>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d10e      	bne.n	8003734 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d10b      	bne.n	8003734 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d063      	beq.n	80037f0 <HAL_RCC_OscConfig+0x2f0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d15f      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e300      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d106      	bne.n	800374c <HAL_RCC_OscConfig+0x24c>
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0x288>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x270>
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0x288>
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a08      	ldr	r2, [pc, #32]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_RCC_OscConfig+0x298>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01b      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe ffc2 	bl	8002718 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e010      	b.n	80037ba <HAL_RCC_OscConfig+0x2ba>
 8003798:	40021000 	.word	0x40021000
 800379c:	08006b4c 	.word	0x08006b4c
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe ffb6 	bl	8002718 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e2bd      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ba:	4baf      	ldr	r3, [pc, #700]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x2a8>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe ffa6 	bl	8002718 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe ffa2 	bl	8002718 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e2a9      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037e2:	4ba5      	ldr	r3, [pc, #660]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x2d0>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d060      	beq.n	80038c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d005      	beq.n	8003810 <HAL_RCC_OscConfig+0x310>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d119      	bne.n	800383e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d116      	bne.n	800383e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003810:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_OscConfig+0x328>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e286      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	4990      	ldr	r1, [pc, #576]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	e040      	b.n	80038c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d023      	beq.n	800388e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003846:	4b8c      	ldr	r3, [pc, #560]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a8b      	ldr	r2, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe ff61 	bl	8002718 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe ff5d 	bl	8002718 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e264      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386c:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b7f      	ldr	r3, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	497c      	ldr	r1, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	e018      	b.n	80038c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b7a      	ldr	r3, [pc, #488]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a79      	ldr	r2, [pc, #484]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fe ff3d 	bl	8002718 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a2:	f7fe ff39 	bl	8002718 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e240      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b4:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f0      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03c      	beq.n	8003946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80038d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038da:	4a67      	ldr	r2, [pc, #412]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fe ff18 	bl	8002718 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe ff14 	bl	8002718 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e21b      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fe:	4b5e      	ldr	r3, [pc, #376]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x3ec>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390e:	4b5a      	ldr	r3, [pc, #360]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fe fefb 	bl	8002718 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003926:	f7fe fef7 	bl	8002718 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1fe      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003938:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80a6 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003958:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	4a43      	ldr	r2, [pc, #268]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
 8003970:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397c:	2301      	movs	r3, #1
 800397e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003980:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_OscConfig+0x57c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d118      	bne.n	80039be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_OscConfig+0x57c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_RCC_OscConfig+0x57c>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003998:	f7fe febe 	bl	8002718 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fe feba 	bl	8002718 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1c1      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b2:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <HAL_RCC_OscConfig+0x57c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4d8>
 80039c6:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d6:	e024      	b.n	8003a22 <HAL_RCC_OscConfig+0x522>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d110      	bne.n	8003a02 <HAL_RCC_OscConfig+0x502>
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039e8:	f043 0304 	orr.w	r3, r3, #4
 80039ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	e00f      	b.n	8003a22 <HAL_RCC_OscConfig+0x522>
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fe75 	bl	8002718 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fe71 	bl	8002718 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e176      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0ed      	beq.n	8003a32 <HAL_RCC_OscConfig+0x532>
 8003a56:	e01a      	b.n	8003a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe fe5e 	bl	8002718 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a5e:	e00f      	b.n	8003a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe fe5a 	bl	8002718 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d906      	bls.n	8003a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e15f      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a80:	4baa      	ldr	r3, [pc, #680]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e8      	bne.n	8003a60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4ba5      	ldr	r3, [pc, #660]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	4aa4      	ldr	r2, [pc, #656]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d03c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01c      	beq.n	8003aee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ab4:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aba:	4a9c      	ldr	r2, [pc, #624]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fe28 	bl	8002718 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003acc:	f7fe fe24 	bl	8002718 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e12b      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ade:	4b93      	ldr	r3, [pc, #588]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RCC_OscConfig+0x5cc>
 8003aec:	e01b      	b.n	8003b26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aee:	4b8f      	ldr	r3, [pc, #572]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af4:	4a8d      	ldr	r2, [pc, #564]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fe0b 	bl	8002718 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b06:	f7fe fe07 	bl	8002718 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e10e      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b18:	4b84      	ldr	r3, [pc, #528]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ef      	bne.n	8003b06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8102 	beq.w	8003d34 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f040 80c5 	bne.w	8003cc4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b3a:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d12c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d123      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d113      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d067      	beq.n	8003c78 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d062      	beq.n	8003c74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0bb      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bca:	f7fe fda5 	bl	8002718 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fe fda1 	bl	8002718 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0a8      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCC_OscConfig+0x830>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c0a:	0212      	lsls	r2, r2, #8
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c12:	0852      	lsrs	r2, r2, #1
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0552      	lsls	r2, r2, #21
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c1e:	0852      	lsrs	r2, r2, #1
 8003c20:	3a01      	subs	r2, #1
 8003c22:	0652      	lsls	r2, r2, #25
 8003c24:	4311      	orrs	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c2a:	06d2      	lsls	r2, r2, #27
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	493f      	ldr	r1, [pc, #252]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a39      	ldr	r2, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c4c:	f7fe fd64 	bl	8002718 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fd60 	bl	8002718 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	e05f      	b.n	8003d34 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e05e      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c78:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d157      	bne.n	8003d34 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c90:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c9c:	f7fe fd3c 	bl	8002718 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fe fd38 	bl	8002718 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e03f      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x7a4>
 8003cc2:	e037      	b.n	8003d34 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d02d      	beq.n	8003d26 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003cf4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fd0b 	bl	8002718 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fe fd07 	bl	8002718 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e00e      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_OscConfig+0x82c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x806>
 8003d24:	e006      	b.n	8003d34 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e005      	b.n	8003d36 <HAL_RCC_OscConfig+0x836>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0c8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b66      	ldr	r3, [pc, #408]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 0207 	bic.w	r2, r3, #7
 8003d6a:	4961      	ldr	r1, [pc, #388]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b0      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d04c      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d98:	4b56      	ldr	r3, [pc, #344]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e09e      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db0:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e092      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dc8:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e086      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd8:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e07e      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003de8:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 0203 	bic.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	493f      	ldr	r1, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fe fc8d 	bl	8002718 <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e02:	f7fe fc89 	bl	8002718 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e066      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 020c 	and.w	r2, r3, #12
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d1eb      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e36:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	492c      	ldr	r1, [pc, #176]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d210      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 0207 	bic.w	r2, r3, #7
 8003e5e:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e036      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4918      	ldr	r1, [pc, #96]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb6:	f000 f825 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fbd0 	bl	8002680 <HAL_InitTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08006b4c 	.word	0x08006b4c
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20000004 	.word	0x20000004

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d121      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11e      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f38:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f44:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f54:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e004      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d133      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa4>
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0xaa>
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003faa:	617b      	str	r3, [r7, #20]
      break;
 8003fac:	e005      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fb0:	617b      	str	r3, [r7, #20]
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	617b      	str	r3, [r7, #20]
      break;
 8003fb8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	fb02 f203 	mul.w	r2, r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	0e5b      	lsrs	r3, r3, #25
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	3301      	adds	r3, #1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3724      	adds	r7, #36	; 0x24
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40021000 	.word	0x40021000
 800400c:	08006b64 	.word	0x08006b64
 8004010:	00f42400 	.word	0x00f42400
 8004014:	007a1200 	.word	0x007a1200

08004018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCC_GetHCLKFreq+0x14>)
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004034:	f7ff fff0 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004038:	4601      	mov	r1, r0
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	08006b5c 	.word	0x08006b5c

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004060:	f7ff ffda 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004064:	4601      	mov	r1, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0adb      	lsrs	r3, r3, #11
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4a04      	ldr	r2, [pc, #16]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	08006b5c 	.word	0x08006b5c

08004088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004094:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a0:	f7ff f9ca 	bl	8003438 <HAL_PWREx_GetVoltageRange>
 80040a4:	6178      	str	r0, [r7, #20]
 80040a6:	e014      	b.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	; 0x58
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c0:	f7ff f9ba 	bl	8003438 <HAL_PWREx_GetVoltageRange>
 80040c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d10b      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d919      	bls.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2ba0      	cmp	r3, #160	; 0xa0
 80040e4:	d902      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e6:	2302      	movs	r3, #2
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e013      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e010      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d902      	bls.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040f8:	2303      	movs	r3, #3
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e00a      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d102      	bne.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004104:	2302      	movs	r3, #2
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e004      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b70      	cmp	r3, #112	; 0x70
 800410e:	d101      	bne.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004110:	2301      	movs	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 0207 	bic.w	r2, r3, #7
 800411c:	4909      	ldr	r1, [pc, #36]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	40022000 	.word	0x40022000

08004148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004150:	2300      	movs	r3, #0
 8004152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004154:	2300      	movs	r3, #0
 8004156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02f      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800416c:	d005      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800416e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004172:	d015      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800417a:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fa44 	bl	800461c <RCCEx_PLLSAI1_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	74fb      	strb	r3, [r7, #19]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a8:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	494e      	ldr	r1, [pc, #312]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 809e 	beq.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041d6:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ec:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	4a3f      	ldr	r2, [pc, #252]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
 80041f8:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004204:	2301      	movs	r3, #1
 8004206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004208:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004214:	f7fe fa80 	bl	8002718 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800421a:	e009      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe fa7c 	bl	8002718 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	74fb      	strb	r3, [r7, #19]
        break;
 800422e:	e005      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004230:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d15a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	429a      	cmp	r2, r3
 800425c:	d019      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800428a:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe fa3c 	bl	8002718 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	e00b      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe fa38 	bl	8002718 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d902      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	74fb      	strb	r3, [r7, #19]
            break;
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ec      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042de:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042e6:	e009      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fc:	7c7b      	ldrb	r3, [r7, #17]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b9e      	ldr	r3, [pc, #632]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4a9d      	ldr	r2, [pc, #628]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800431a:	4b98      	ldr	r3, [pc, #608]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 0203 	bic.w	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4994      	ldr	r1, [pc, #592]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800433c:	4b8f      	ldr	r3, [pc, #572]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 020c 	bic.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	498c      	ldr	r1, [pc, #560]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800435e:	4b87      	ldr	r3, [pc, #540]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	4983      	ldr	r1, [pc, #524]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004380:	4b7e      	ldr	r3, [pc, #504]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	497b      	ldr	r1, [pc, #492]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a2:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	4972      	ldr	r1, [pc, #456]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c4:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	496a      	ldr	r1, [pc, #424]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e6:	4b65      	ldr	r3, [pc, #404]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	4961      	ldr	r1, [pc, #388]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004408:	4b5c      	ldr	r3, [pc, #368]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	4959      	ldr	r1, [pc, #356]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442a:	4b54      	ldr	r3, [pc, #336]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	4950      	ldr	r1, [pc, #320]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800444c:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	4948      	ldr	r1, [pc, #288]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446e:	4b43      	ldr	r3, [pc, #268]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004474:	f023 0203 	bic.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	493f      	ldr	r1, [pc, #252]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d028      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004490:	4b3a      	ldr	r3, [pc, #232]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	4937      	ldr	r1, [pc, #220]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ae:	d106      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ba:	60d3      	str	r3, [r2, #12]
 80044bc:	e011      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f8a4 	bl	800461c <RCCEx_PLLSAI1_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d028      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	491f      	ldr	r1, [pc, #124]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450c:	d106      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004518:	60d3      	str	r3, [r2, #12]
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f875 	bl	800461c <RCCEx_PLLSAI1_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456a:	d109      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a02      	ldr	r2, [pc, #8]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004576:	60d3      	str	r3, [r2, #12]
 8004578:	e014      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f843 	bl	800461c <RCCEx_PLLSAI1_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01c      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ce:	d10c      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f820 	bl	800461c <RCCEx_PLLSAI1_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	4904      	ldr	r1, [pc, #16]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800460c:	7cbb      	ldrb	r3, [r7, #18]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800462a:	4b73      	ldr	r3, [pc, #460]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004636:	4b70      	ldr	r3, [pc, #448]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d10d      	bne.n	8004662 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
       ||
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800464e:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
       ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d044      	beq.n	80046ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e041      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d00c      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x6e>
 8004670:	2b03      	cmp	r3, #3
 8004672:	d013      	beq.n	800469c <RCCEx_PLLSAI1_Config+0x80>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d120      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004678:	4b5f      	ldr	r3, [pc, #380]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11d      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e01a      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800468a:	4b5b      	ldr	r3, [pc, #364]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469a:	e013      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469c:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a8:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b8:	e006      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
      break;
 80046be:	e004      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046c0:	bf00      	nop
 80046c2:	e002      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10d      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046d0:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	430b      	orrs	r3, r1
 80046e6:	4944      	ldr	r1, [pc, #272]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d17c      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046f2:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fe f80b 	bl	8002718 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004704:	e009      	b.n	800471a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004706:	f7fe f807 	bl	8002718 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d902      	bls.n	800471a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	73fb      	strb	r3, [r7, #15]
        break;
 8004718:	e005      	b.n	8004726 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d15f      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d110      	bne.n	8004754 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800473a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	0211      	lsls	r1, r2, #8
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	06d2      	lsls	r2, r2, #27
 800474a:	430a      	orrs	r2, r1
 800474c:	492a      	ldr	r1, [pc, #168]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
 8004752:	e027      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d112      	bne.n	8004780 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004762:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	0211      	lsls	r1, r2, #8
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6912      	ldr	r2, [r2, #16]
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	3a01      	subs	r2, #1
 8004774:	0552      	lsls	r2, r2, #21
 8004776:	430a      	orrs	r2, r1
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]
 800477e:	e011      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6952      	ldr	r2, [r2, #20]
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	3a01      	subs	r2, #1
 800479a:	0652      	lsls	r2, r2, #25
 800479c:	430a      	orrs	r2, r1
 800479e:	4916      	ldr	r1, [pc, #88]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fd ffb2 	bl	8002718 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b8:	f7fd ffae 	bl	8002718 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01d      	b.n	800484a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fd1a 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fd68 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_TIM_Base_Start+0x50>)
 800486c:	4013      	ands	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d00b      	beq.n	800488e <HAL_TIM_Base_Start+0x3a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d007      	beq.n	800488e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_TIM_Base_Stop+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f240 4344 	movw	r3, #1092	; 0x444
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_Base_Stop+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_TIM_Base_Start_IT+0x50>)
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d00b      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0x42>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d007      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	00010007 	.word	0x00010007

08004954 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a1a      	ldr	r2, [r3, #32]
 8004972:	f241 1311 	movw	r3, #4369	; 0x1111
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <HAL_TIM_Base_Stop_IT+0x48>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	f240 4344 	movw	r3, #1092	; 0x444
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <HAL_TIM_Base_Stop_IT+0x48>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e01d      	b.n	80049f8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fc83 	bl	80022dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 fc91 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	d841      	bhi.n	8004a94 <HAL_TIM_IC_Start_IT+0x94>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_TIM_IC_Start_IT+0x18>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a95 	.word	0x08004a95
 8004a20:	08004a95 	.word	0x08004a95
 8004a24:	08004a95 	.word	0x08004a95
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004a95 	.word	0x08004a95
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a95 	.word	0x08004a95
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a83 	.word	0x08004a83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0202 	orr.w	r2, r2, #2
 8004a5a:	60da      	str	r2, [r3, #12]
      break;
 8004a5c:	e01b      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0204 	orr.w	r2, r2, #4
 8004a6c:	60da      	str	r2, [r3, #12]
      break;
 8004a6e:	e012      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	60da      	str	r2, [r3, #12]
      break;
 8004a80:	e009      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0210 	orr.w	r2, r2, #16
 8004a90:	60da      	str	r2, [r3, #12]
      break;
 8004a92:	e000      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004a94:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fe50 	bl	8005744 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_TIM_IC_Start_IT+0xd8>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d00b      	beq.n	8004ace <HAL_TIM_IC_Start_IT+0xce>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d007      	beq.n	8004ace <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	00010007 	.word	0x00010007

08004adc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d841      	bhi.n	8004b70 <HAL_TIM_IC_Stop_IT+0x94>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_IC_Stop_IT+0x18>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b71 	.word	0x08004b71
 8004afc:	08004b71 	.word	0x08004b71
 8004b00:	08004b71 	.word	0x08004b71
 8004b04:	08004b3b 	.word	0x08004b3b
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004b71 	.word	0x08004b71
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b71 	.word	0x08004b71
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004b5f 	.word	0x08004b5f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0202 	bic.w	r2, r2, #2
 8004b36:	60da      	str	r2, [r3, #12]
      break;
 8004b38:	e01b      	b.n	8004b72 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	60da      	str	r2, [r3, #12]
      break;
 8004b4a:	e012      	b.n	8004b72 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0208 	bic.w	r2, r2, #8
 8004b5a:	60da      	str	r2, [r3, #12]
      break;
 8004b5c:	e009      	b.n	8004b72 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0210 	bic.w	r2, r2, #16
 8004b6c:	60da      	str	r2, [r3, #12]
      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004b70:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fde2 	bl	8005744 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_TIM_IC_Stop_IT+0xd4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a1a      	ldr	r2, [r3, #32]
 8004b96:	f240 4344 	movw	r3, #1092	; 0x444
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IC_Stop_IT+0xd4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop

08004bbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e083      	b.n	8004cd8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fd faed 	bl	80021c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004c00:	f023 0307 	bic.w	r3, r3, #7
 8004c04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 fb7d 	bl	8005310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c5c:	f023 030c 	bic.w	r3, r3, #12
 8004c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	011a      	lsls	r2, r3, #4
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	031b      	lsls	r3, r3, #12
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_TIM_Encoder_Start+0x16>
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d008      	beq.n	8004d06 <HAL_TIM_Encoder_Start+0x26>
 8004cf4:	e00f      	b.n	8004d16 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fd20 	bl	8005744 <TIM_CCxChannelCmd>
      break;
 8004d04:	e016      	b.n	8004d34 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fd18 	bl	8005744 <TIM_CCxChannelCmd>
      break;
 8004d14:	e00e      	b.n	8004d34 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fd10 	bl	8005744 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fd09 	bl	8005744 <TIM_CCxChannelCmd>
      break;
 8004d32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d122      	bne.n	8004daa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d11b      	bne.n	8004daa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0202 	mvn.w	r2, #2
 8004d7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7fd f977 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8004d96:	e005      	b.n	8004da4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa9b 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 faa2 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d122      	bne.n	8004dfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d11b      	bne.n	8004dfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0204 	mvn.w	r2, #4
 8004dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fd f94d 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8004dea:	e005      	b.n	8004df8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa71 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa78 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d122      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d11b      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0208 	mvn.w	r2, #8
 8004e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2204      	movs	r2, #4
 8004e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd f923 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8004e3e:	e005      	b.n	8004e4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa47 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa4e 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d122      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d11b      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0210 	mvn.w	r2, #16
 8004e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7fd f8f9 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8004e92:	e005      	b.n	8004ea0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa1d 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa24 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0201 	mvn.w	r2, #1
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9f7 	bl	80052c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b80      	cmp	r3, #128	; 0x80
 8004ede:	d10e      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d107      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fcc1 	bl	8005880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fcb4 	bl	8005894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9d2 	bl	80052fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0220 	mvn.w	r2, #32
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fc74 	bl	800586c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e08a      	b.n	80050bc <HAL_TIM_IC_ConfigChannel+0x130>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f000 fa0e 	bl	80053ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 020c 	bic.w	r2, r2, #12
 8004fde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	619a      	str	r2, [r3, #24]
 8004ff2:	e05a      	b.n	80050aa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d11c      	bne.n	8005034 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6819      	ldr	r1, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f000 fa7a 	bl	8005502 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800501c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6999      	ldr	r1, [r3, #24]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	021a      	lsls	r2, r3, #8
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	619a      	str	r2, [r3, #24]
 8005032:	e03a      	b.n	80050aa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d11b      	bne.n	8005072 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f000 fac7 	bl	80055dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 020c 	bic.w	r2, r2, #12
 800505c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	61da      	str	r2, [r3, #28]
 8005070:	e01b      	b.n	80050aa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f000 fae7 	bl	8005654 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005094:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	021a      	lsls	r2, r3, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0a8      	b.n	800522e <HAL_TIM_ConfigClockSource+0x16a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d067      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0x124>
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d80b      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x70>
 800511c:	2b10      	cmp	r3, #16
 800511e:	d073      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x144>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d802      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x66>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d06f      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005128:	e078      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800512a:	2b20      	cmp	r3, #32
 800512c:	d06c      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x144>
 800512e:	2b30      	cmp	r3, #48	; 0x30
 8005130:	d06a      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005132:	e073      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d00d      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x90>
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d804      	bhi.n	8005146 <HAL_TIM_ConfigClockSource+0x82>
 800513c:	2b50      	cmp	r3, #80	; 0x50
 800513e:	d033      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0xe4>
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d041      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005144:	e06a      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	d066      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x156>
 800514c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005150:	d017      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005152:	e063      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 face 	bl	8005704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005176:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]
      break;
 8005180:	e04c      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f000 fab7 	bl	8005704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a4:	609a      	str	r2, [r3, #8]
      break;
 80051a6:	e039      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f000 f975 	bl	80054a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2150      	movs	r1, #80	; 0x50
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fa84 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80051c6:	e029      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f000 f9d1 	bl	800557c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2160      	movs	r1, #96	; 0x60
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fa74 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80051e6:	e019      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f000 f955 	bl	80054a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2140      	movs	r1, #64	; 0x40
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa64 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005206:	e009      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 fa5b 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005218:	e000      	b.n	800521c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800521a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d831      	bhi.n	80052b0 <HAL_TIM_ReadCapturedValue+0x78>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <HAL_TIM_ReadCapturedValue+0x1c>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005289 	.word	0x08005289
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052b1 	.word	0x080052b1
 8005260:	080052b1 	.word	0x080052b1
 8005264:	08005293 	.word	0x08005293
 8005268:	080052b1 	.word	0x080052b1
 800526c:	080052b1 	.word	0x080052b1
 8005270:	080052b1 	.word	0x080052b1
 8005274:	0800529d 	.word	0x0800529d
 8005278:	080052b1 	.word	0x080052b1
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052b1 	.word	0x080052b1
 8005284:	080052a7 	.word	0x080052a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	60fb      	str	r3, [r7, #12]

      break;
 8005290:	e00f      	b.n	80052b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	60fb      	str	r3, [r7, #12]

      break;
 800529a:	e00a      	b.n	80052b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	60fb      	str	r3, [r7, #12]

      break;
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	60fb      	str	r3, [r7, #12]

      break;
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052b0:	bf00      	nop
  }

  return tmpreg;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <TIM_Base_SetConfig+0xcc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_Base_SetConfig+0x28>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0x28>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <TIM_Base_SetConfig+0xd0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a23      	ldr	r2, [pc, #140]	; (80053dc <TIM_Base_SetConfig+0xcc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_Base_SetConfig+0x62>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d00b      	beq.n	8005372 <TIM_Base_SetConfig+0x62>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <TIM_Base_SetConfig+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_Base_SetConfig+0x62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <TIM_Base_SetConfig+0xd4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_Base_SetConfig+0x62>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <TIM_Base_SetConfig+0xd8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d108      	bne.n	8005384 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0xcc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_Base_SetConfig+0xb0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0c      	ldr	r2, [pc, #48]	; (80053e4 <TIM_Base_SetConfig+0xd4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_Base_SetConfig+0xb0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <TIM_Base_SetConfig+0xd8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d103      	bne.n	80053c8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	615a      	str	r2, [r3, #20]
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400

080053ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <TIM_TI1_SetConfig+0xac>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00b      	beq.n	8005432 <TIM_TI1_SetConfig+0x46>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d007      	beq.n	8005432 <TIM_TI1_SetConfig+0x46>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a1d      	ldr	r2, [pc, #116]	; (800549c <TIM_TI1_SetConfig+0xb0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_TI1_SetConfig+0x46>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <TIM_TI1_SetConfig+0xb4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <TIM_TI1_SetConfig+0x4a>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <TIM_TI1_SetConfig+0x4c>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e003      	b.n	8005456 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	b2db      	uxtb	r3, r3
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f023 030a 	bic.w	r3, r3, #10
 8005470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 030a 	and.w	r3, r3, #10
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40014000 	.word	0x40014000

080054a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f023 0201 	bic.w	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 030a 	bic.w	r3, r3, #10
 80054e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005502:	b480      	push	{r7}
 8005504:	b087      	sub	sp, #28
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f023 0210 	bic.w	r2, r3, #16
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	b29b      	uxth	r3, r3
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005554:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f023 0210 	bic.w	r2, r3, #16
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	031b      	lsls	r3, r3, #12
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0303 	bic.w	r3, r3, #3
 8005608:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005618:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	b2db      	uxtb	r3, r3
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800562c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005692:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	031b      	lsls	r3, r3, #12
 8005698:	b29b      	uxth	r3, r3
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	031b      	lsls	r3, r3, #12
 80056ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f043 0307 	orr.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	431a      	orrs	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2201      	movs	r2, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	43db      	mvns	r3, r3
 8005766:	401a      	ands	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e054      	b.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a17      	ldr	r2, [pc, #92]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d009      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a13      	ldr	r2, [pc, #76]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a11      	ldr	r2, [pc, #68]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10c      	bne.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400
 8005868:	40014000 	.word	0x40014000

0800586c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e040      	b.n	800593c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc fd50 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2224      	movs	r2, #36	; 0x24
 80058d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f82c 	bl	8005944 <UART_SetConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e022      	b.n	800593c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fb60 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fbe7 	bl	8006108 <UART_CheckIdleState>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005948:	b08a      	sub	sp, #40	; 0x28
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4313      	orrs	r3, r2
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4bb0      	ldr	r3, [pc, #704]	; (8005c3c <UART_SetConfig+0x2f8>)
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005982:	430b      	orrs	r3, r1
 8005984:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4aa6      	ldr	r2, [pc, #664]	; (8005c40 <UART_SetConfig+0x2fc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	4313      	orrs	r3, r2
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a9d      	ldr	r2, [pc, #628]	; (8005c44 <UART_SetConfig+0x300>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d126      	bne.n	8005a22 <UART_SetConfig+0xde>
 80059d4:	4b9c      	ldr	r3, [pc, #624]	; (8005c48 <UART_SetConfig+0x304>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d81a      	bhi.n	8005a18 <UART_SetConfig+0xd4>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0xa4>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a09 	.word	0x08005a09
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fe:	e0d6      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a06:	e0d2      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e0ce      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a10:	2308      	movs	r3, #8
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e0ca      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	bf00      	nop
 8005a20:	e0c5      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a89      	ldr	r2, [pc, #548]	; (8005c4c <UART_SetConfig+0x308>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d138      	bne.n	8005a9e <UART_SetConfig+0x15a>
 8005a2c:	4b86      	ldr	r3, [pc, #536]	; (8005c48 <UART_SetConfig+0x304>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d82c      	bhi.n	8005a94 <UART_SetConfig+0x150>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0xfc>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a85 	.word	0x08005a85
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a95 	.word	0x08005a95
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a7d 	.word	0x08005a7d
 8005a64:	08005a95 	.word	0x08005a95
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a8d 	.word	0x08005a8d
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e098      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e094      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e090      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e08c      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	bf00      	nop
 8005a9c:	e087      	b.n	8005bae <UART_SetConfig+0x26a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6b      	ldr	r2, [pc, #428]	; (8005c50 <UART_SetConfig+0x30c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d125      	bne.n	8005af4 <UART_SetConfig+0x1b0>
 8005aa8:	4b67      	ldr	r3, [pc, #412]	; (8005c48 <UART_SetConfig+0x304>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d011      	beq.n	8005ada <UART_SetConfig+0x196>
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d802      	bhi.n	8005ac0 <UART_SetConfig+0x17c>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <UART_SetConfig+0x186>
 8005abe:	e014      	b.n	8005aea <UART_SetConfig+0x1a6>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d006      	beq.n	8005ad2 <UART_SetConfig+0x18e>
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d00c      	beq.n	8005ae2 <UART_SetConfig+0x19e>
 8005ac8:	e00f      	b.n	8005aea <UART_SetConfig+0x1a6>
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad0:	e06d      	b.n	8005bae <UART_SetConfig+0x26a>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad8:	e069      	b.n	8005bae <UART_SetConfig+0x26a>
 8005ada:	2304      	movs	r3, #4
 8005adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae0:	e065      	b.n	8005bae <UART_SetConfig+0x26a>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae8:	e061      	b.n	8005bae <UART_SetConfig+0x26a>
 8005aea:	2310      	movs	r3, #16
 8005aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af0:	bf00      	nop
 8005af2:	e05c      	b.n	8005bae <UART_SetConfig+0x26a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a56      	ldr	r2, [pc, #344]	; (8005c54 <UART_SetConfig+0x310>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d125      	bne.n	8005b4a <UART_SetConfig+0x206>
 8005afe:	4b52      	ldr	r3, [pc, #328]	; (8005c48 <UART_SetConfig+0x304>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d011      	beq.n	8005b30 <UART_SetConfig+0x1ec>
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d802      	bhi.n	8005b16 <UART_SetConfig+0x1d2>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <UART_SetConfig+0x1dc>
 8005b14:	e014      	b.n	8005b40 <UART_SetConfig+0x1fc>
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d006      	beq.n	8005b28 <UART_SetConfig+0x1e4>
 8005b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b1c:	d00c      	beq.n	8005b38 <UART_SetConfig+0x1f4>
 8005b1e:	e00f      	b.n	8005b40 <UART_SetConfig+0x1fc>
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e042      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2e:	e03e      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b36:	e03a      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3e:	e036      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b46:	bf00      	nop
 8005b48:	e031      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d129      	bne.n	8005ba8 <UART_SetConfig+0x264>
 8005b54:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <UART_SetConfig+0x304>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d014      	beq.n	8005b8e <UART_SetConfig+0x24a>
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d802      	bhi.n	8005b70 <UART_SetConfig+0x22c>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <UART_SetConfig+0x23a>
 8005b6e:	e016      	b.n	8005b9e <UART_SetConfig+0x25a>
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d007      	beq.n	8005b86 <UART_SetConfig+0x242>
 8005b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b7a:	d00c      	beq.n	8005b96 <UART_SetConfig+0x252>
 8005b7c:	e00f      	b.n	8005b9e <UART_SetConfig+0x25a>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b84:	e013      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8c:	e00f      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b8e:	2304      	movs	r3, #4
 8005b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b94:	e00b      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b96:	2308      	movs	r3, #8
 8005b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9c:	e007      	b.n	8005bae <UART_SetConfig+0x26a>
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <UART_SetConfig+0x26a>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f040 80fb 	bne.w	8005db0 <UART_SetConfig+0x46c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d823      	bhi.n	8005c0a <UART_SetConfig+0x2c6>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0x284>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005bfb 	.word	0x08005bfb
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c0b 	.word	0x08005c0b
 8005be8:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fe fa20 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bf2:	e00d      	b.n	8005c10 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bf4:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <UART_SetConfig+0x314>)
 8005bf6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bf8:	e00a      	b.n	8005c10 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fe f983 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005bfe:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c00:	e006      	b.n	8005c10 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c08:	e002      	b.n	8005c10 <UART_SetConfig+0x2cc>
      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	76fb      	strb	r3, [r7, #27]
        break;
 8005c0e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 81ca 	beq.w	8005fac <UART_SetConfig+0x668>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d305      	bcc.n	8005c34 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d913      	bls.n	8005c5c <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	76fb      	strb	r3, [r7, #27]
 8005c38:	e1b8      	b.n	8005fac <UART_SetConfig+0x668>
 8005c3a:	bf00      	nop
 8005c3c:	efff69f3 	.word	0xefff69f3
 8005c40:	40008000 	.word	0x40008000
 8005c44:	40013800 	.word	0x40013800
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40004400 	.word	0x40004400
 8005c50:	40004800 	.word	0x40004800
 8005c54:	40004c00 	.word	0x40004c00
 8005c58:	00f42400 	.word	0x00f42400
      }
      else
      {
        switch (clocksource)
 8005c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	f200 8092 	bhi.w	8005d8a <UART_SetConfig+0x446>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0x328>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005d8b 	.word	0x08005d8b
 8005c74:	08005cdf 	.word	0x08005cdf
 8005c78:	08005d8b 	.word	0x08005d8b
 8005c7c:	08005d13 	.word	0x08005d13
 8005c80:	08005d8b 	.word	0x08005d8b
 8005c84:	08005d8b 	.word	0x08005d8b
 8005c88:	08005d8b 	.word	0x08005d8b
 8005c8c:	08005d61 	.word	0x08005d61
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fe f9ce 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005c94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	f04f 0400 	mov.w	r4, #0
 8005ca6:	0214      	lsls	r4, r2, #8
 8005ca8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cac:	020b      	lsls	r3, r1, #8
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6852      	ldr	r2, [r2, #4]
 8005cb2:	0852      	lsrs	r2, r2, #1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	eb13 0b01 	adds.w	fp, r3, r1
 8005cbe:	eb44 0c02 	adc.w	ip, r4, r2
 8005cc2:	4658      	mov	r0, fp
 8005cc4:	4661      	mov	r1, ip
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f04f 0400 	mov.w	r4, #0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4623      	mov	r3, r4
 8005cd2:	f7fa fecb 	bl	8000a6c <__aeabi_uldivmod>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cdc:	e058      	b.n	8005d90 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	f04f 0400 	mov.w	r4, #0
 8005ce8:	49ae      	ldr	r1, [pc, #696]	; (8005fa4 <UART_SetConfig+0x660>)
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	eb13 0b01 	adds.w	fp, r3, r1
 8005cf2:	eb44 0c02 	adc.w	ip, r4, r2
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	4661      	mov	r1, ip
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f04f 0400 	mov.w	r4, #0
 8005d02:	461a      	mov	r2, r3
 8005d04:	4623      	mov	r3, r4
 8005d06:	f7fa feb1 	bl	8000a6c <__aeabi_uldivmod>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d10:	e03e      	b.n	8005d90 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe f8f7 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005d16:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	f04f 0400 	mov.w	r4, #0
 8005d28:	0214      	lsls	r4, r2, #8
 8005d2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005d2e:	020b      	lsls	r3, r1, #8
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6852      	ldr	r2, [r2, #4]
 8005d34:	0852      	lsrs	r2, r2, #1
 8005d36:	4611      	mov	r1, r2
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	eb13 0b01 	adds.w	fp, r3, r1
 8005d40:	eb44 0c02 	adc.w	ip, r4, r2
 8005d44:	4658      	mov	r0, fp
 8005d46:	4661      	mov	r1, ip
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f04f 0400 	mov.w	r4, #0
 8005d50:	461a      	mov	r2, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	f7fa fe8a 	bl	8000a6c <__aeabi_uldivmod>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d5e:	e017      	b.n	8005d90 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005d6e:	f144 0100 	adc.w	r1, r4, #0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f04f 0400 	mov.w	r4, #0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	f7fa fe75 	bl	8000a6c <__aeabi_uldivmod>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d88:	e002      	b.n	8005d90 <UART_SetConfig+0x44c>
          default:
            ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	76fb      	strb	r3, [r7, #27]
            break;
 8005d8e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d96:	d308      	bcc.n	8005daa <UART_SetConfig+0x466>
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9e:	d204      	bcs.n	8005daa <UART_SetConfig+0x466>
        {
          huart->Instance->BRR = usartdiv;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	e100      	b.n	8005fac <UART_SetConfig+0x668>
        }
        else
        {
          ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	76fb      	strb	r3, [r7, #27]
 8005dae:	e0fd      	b.n	8005fac <UART_SetConfig+0x668>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	f040 8084 	bne.w	8005ec4 <UART_SetConfig+0x580>
  {
    switch (clocksource)
 8005dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d85f      	bhi.n	8005e84 <UART_SetConfig+0x540>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x488>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e31 	.word	0x08005e31
 8005dd8:	08005e85 	.word	0x08005e85
 8005ddc:	08005e4d 	.word	0x08005e4d
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005e85 	.word	0x08005e85
 8005de8:	08005e85 	.word	0x08005e85
 8005dec:	08005e6d 	.word	0x08005e6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fe f91e 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005df4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	005a      	lsls	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e0e:	e03c      	b.n	8005e8a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e10:	f7fe f924 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8005e14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	005a      	lsls	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e2e:	e02c      	b.n	8005e8a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005e3a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6852      	ldr	r2, [r2, #4]
 8005e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e4a:	e01e      	b.n	8005e8a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4c:	f7fe f85a 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005e50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	005a      	lsls	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e6a:	e00e      	b.n	8005e8a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e82:	e002      	b.n	8005e8a <UART_SetConfig+0x546>
      default:
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	76fb      	strb	r3, [r7, #27]
        break;
 8005e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d916      	bls.n	8005ebe <UART_SetConfig+0x57a>
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e96:	d212      	bcs.n	8005ebe <UART_SetConfig+0x57a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f023 030f 	bic.w	r3, r3, #15
 8005ea0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	89fb      	ldrh	r3, [r7, #14]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	89fa      	ldrh	r2, [r7, #14]
 8005eba:	60da      	str	r2, [r3, #12]
 8005ebc:	e076      	b.n	8005fac <UART_SetConfig+0x668>
    }
    else
    {
      ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	76fb      	strb	r3, [r7, #27]
 8005ec2:	e073      	b.n	8005fac <UART_SetConfig+0x668>
    }
  }
  else
  {
    switch (clocksource)
 8005ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d85c      	bhi.n	8005f86 <UART_SetConfig+0x642>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x590>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f17 	.word	0x08005f17
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f87 	.word	0x08005f87
 8005ee4:	08005f51 	.word	0x08005f51
 8005ee8:	08005f87 	.word	0x08005f87
 8005eec:	08005f87 	.word	0x08005f87
 8005ef0:	08005f87 	.word	0x08005f87
 8005ef4:	08005f6f 	.word	0x08005f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef8:	f7fe f89a 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005efc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085a      	lsrs	r2, r3, #1
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f14:	e03a      	b.n	8005f8c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f16:	f7fe f8a1 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8005f1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	085a      	lsrs	r2, r3, #1
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f32:	e02b      	b.n	8005f8c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005f3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6852      	ldr	r2, [r2, #4]
 8005f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f4e:	e01d      	b.n	8005f8c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f50:	f7fd ffd8 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005f54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	085a      	lsrs	r2, r3, #1
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	441a      	add	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f6c:	e00e      	b.n	8005f8c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f84:	e002      	b.n	8005f8c <UART_SetConfig+0x648>
      default:
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	76fb      	strb	r3, [r7, #27]
        break;
 8005f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d90a      	bls.n	8005fa8 <UART_SetConfig+0x664>
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d206      	bcs.n	8005fa8 <UART_SetConfig+0x664>
    {
      huart->Instance->BRR = usartdiv;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	e003      	b.n	8005fac <UART_SetConfig+0x668>
 8005fa4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005fb8:	7efb      	ldrb	r3, [r7, #27]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006116:	f7fc faff 	bl	8002718 <HAL_GetTick>
 800611a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b08      	cmp	r3, #8
 8006128:	d10e      	bne.n	8006148 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f82a 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e020      	b.n	800618a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b04      	cmp	r3, #4
 8006154:	d10e      	bne.n	8006174 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006156:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f814 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e00a      	b.n	800618a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	e05d      	b.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d059      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fc fab4 	bl	8002718 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11b      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e042      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02b      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006216:	d123      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006220:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006230:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e00f      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	bf0c      	ite	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2300      	movne	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	429a      	cmp	r2, r3
 800627c:	d092      	beq.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	2000000c 	.word	0x2000000c

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4e0d      	ldr	r6, [pc, #52]	; (80062cc <__libc_init_array+0x38>)
 8006298:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629a:	1ba4      	subs	r4, r4, r6
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	2500      	movs	r5, #0
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	4e0b      	ldr	r6, [pc, #44]	; (80062d4 <__libc_init_array+0x40>)
 80062a6:	4c0c      	ldr	r4, [pc, #48]	; (80062d8 <__libc_init_array+0x44>)
 80062a8:	f000 fc38 	bl	8006b1c <_init>
 80062ac:	1ba4      	subs	r4, r4, r6
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	2500      	movs	r5, #0
 80062b2:	42a5      	cmp	r5, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062bc:	4798      	blx	r3
 80062be:	3501      	adds	r5, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062c6:	4798      	blx	r3
 80062c8:	3501      	adds	r5, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	08006bd0 	.word	0x08006bd0
 80062d0:	08006bd0 	.word	0x08006bd0
 80062d4:	08006bd0 	.word	0x08006bd0
 80062d8:	08006bd4 	.word	0x08006bd4

080062dc <memmove>:
 80062dc:	4288      	cmp	r0, r1
 80062de:	b510      	push	{r4, lr}
 80062e0:	eb01 0302 	add.w	r3, r1, r2
 80062e4:	d807      	bhi.n	80062f6 <memmove+0x1a>
 80062e6:	1e42      	subs	r2, r0, #1
 80062e8:	4299      	cmp	r1, r3
 80062ea:	d00a      	beq.n	8006302 <memmove+0x26>
 80062ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062f4:	e7f8      	b.n	80062e8 <memmove+0xc>
 80062f6:	4283      	cmp	r3, r0
 80062f8:	d9f5      	bls.n	80062e6 <memmove+0xa>
 80062fa:	1881      	adds	r1, r0, r2
 80062fc:	1ad2      	subs	r2, r2, r3
 80062fe:	42d3      	cmn	r3, r2
 8006300:	d100      	bne.n	8006304 <memmove+0x28>
 8006302:	bd10      	pop	{r4, pc}
 8006304:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006308:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800630c:	e7f7      	b.n	80062fe <memmove+0x22>

0800630e <memset>:
 800630e:	4402      	add	r2, r0
 8006310:	4603      	mov	r3, r0
 8006312:	4293      	cmp	r3, r2
 8006314:	d100      	bne.n	8006318 <memset+0xa>
 8006316:	4770      	bx	lr
 8006318:	f803 1b01 	strb.w	r1, [r3], #1
 800631c:	e7f9      	b.n	8006312 <memset+0x4>
	...

08006320 <siprintf>:
 8006320:	b40e      	push	{r1, r2, r3}
 8006322:	b500      	push	{lr}
 8006324:	b09c      	sub	sp, #112	; 0x70
 8006326:	ab1d      	add	r3, sp, #116	; 0x74
 8006328:	9002      	str	r0, [sp, #8]
 800632a:	9006      	str	r0, [sp, #24]
 800632c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006330:	4809      	ldr	r0, [pc, #36]	; (8006358 <siprintf+0x38>)
 8006332:	9107      	str	r1, [sp, #28]
 8006334:	9104      	str	r1, [sp, #16]
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <siprintf+0x3c>)
 8006338:	f853 2b04 	ldr.w	r2, [r3], #4
 800633c:	9105      	str	r1, [sp, #20]
 800633e:	6800      	ldr	r0, [r0, #0]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	a902      	add	r1, sp, #8
 8006344:	f000 f876 	bl	8006434 <_svfiprintf_r>
 8006348:	9b02      	ldr	r3, [sp, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	b01c      	add	sp, #112	; 0x70
 8006350:	f85d eb04 	ldr.w	lr, [sp], #4
 8006354:	b003      	add	sp, #12
 8006356:	4770      	bx	lr
 8006358:	2000000c 	.word	0x2000000c
 800635c:	ffff0208 	.word	0xffff0208

08006360 <strcat>:
 8006360:	b510      	push	{r4, lr}
 8006362:	4603      	mov	r3, r0
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	1c5c      	adds	r4, r3, #1
 8006368:	b93a      	cbnz	r2, 800637a <strcat+0x1a>
 800636a:	3b01      	subs	r3, #1
 800636c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006370:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006374:	2a00      	cmp	r2, #0
 8006376:	d1f9      	bne.n	800636c <strcat+0xc>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	4623      	mov	r3, r4
 800637c:	e7f2      	b.n	8006364 <strcat+0x4>

0800637e <__ssputs_r>:
 800637e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006382:	688e      	ldr	r6, [r1, #8]
 8006384:	429e      	cmp	r6, r3
 8006386:	4682      	mov	sl, r0
 8006388:	460c      	mov	r4, r1
 800638a:	4690      	mov	r8, r2
 800638c:	4699      	mov	r9, r3
 800638e:	d837      	bhi.n	8006400 <__ssputs_r+0x82>
 8006390:	898a      	ldrh	r2, [r1, #12]
 8006392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006396:	d031      	beq.n	80063fc <__ssputs_r+0x7e>
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	6909      	ldr	r1, [r1, #16]
 800639c:	1a6f      	subs	r7, r5, r1
 800639e:	6965      	ldr	r5, [r4, #20]
 80063a0:	2302      	movs	r3, #2
 80063a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063a6:	fb95 f5f3 	sdiv	r5, r5, r3
 80063aa:	f109 0301 	add.w	r3, r9, #1
 80063ae:	443b      	add	r3, r7
 80063b0:	429d      	cmp	r5, r3
 80063b2:	bf38      	it	cc
 80063b4:	461d      	movcc	r5, r3
 80063b6:	0553      	lsls	r3, r2, #21
 80063b8:	d530      	bpl.n	800641c <__ssputs_r+0x9e>
 80063ba:	4629      	mov	r1, r5
 80063bc:	f000 fb14 	bl	80069e8 <_malloc_r>
 80063c0:	4606      	mov	r6, r0
 80063c2:	b950      	cbnz	r0, 80063da <__ssputs_r+0x5c>
 80063c4:	230c      	movs	r3, #12
 80063c6:	f8ca 3000 	str.w	r3, [sl]
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	f04f 30ff 	mov.w	r0, #4294967295
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	463a      	mov	r2, r7
 80063dc:	6921      	ldr	r1, [r4, #16]
 80063de:	f000 faa9 	bl	8006934 <memcpy>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6126      	str	r6, [r4, #16]
 80063f0:	6165      	str	r5, [r4, #20]
 80063f2:	443e      	add	r6, r7
 80063f4:	1bed      	subs	r5, r5, r7
 80063f6:	6026      	str	r6, [r4, #0]
 80063f8:	60a5      	str	r5, [r4, #8]
 80063fa:	464e      	mov	r6, r9
 80063fc:	454e      	cmp	r6, r9
 80063fe:	d900      	bls.n	8006402 <__ssputs_r+0x84>
 8006400:	464e      	mov	r6, r9
 8006402:	4632      	mov	r2, r6
 8006404:	4641      	mov	r1, r8
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	f7ff ff68 	bl	80062dc <memmove>
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	1b9b      	subs	r3, r3, r6
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	441e      	add	r6, r3
 8006416:	6026      	str	r6, [r4, #0]
 8006418:	2000      	movs	r0, #0
 800641a:	e7dc      	b.n	80063d6 <__ssputs_r+0x58>
 800641c:	462a      	mov	r2, r5
 800641e:	f000 fb3d 	bl	8006a9c <_realloc_r>
 8006422:	4606      	mov	r6, r0
 8006424:	2800      	cmp	r0, #0
 8006426:	d1e2      	bne.n	80063ee <__ssputs_r+0x70>
 8006428:	6921      	ldr	r1, [r4, #16]
 800642a:	4650      	mov	r0, sl
 800642c:	f000 fa8e 	bl	800694c <_free_r>
 8006430:	e7c8      	b.n	80063c4 <__ssputs_r+0x46>
	...

08006434 <_svfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	461d      	mov	r5, r3
 800643a:	898b      	ldrh	r3, [r1, #12]
 800643c:	061f      	lsls	r7, r3, #24
 800643e:	b09d      	sub	sp, #116	; 0x74
 8006440:	4680      	mov	r8, r0
 8006442:	460c      	mov	r4, r1
 8006444:	4616      	mov	r6, r2
 8006446:	d50f      	bpl.n	8006468 <_svfiprintf_r+0x34>
 8006448:	690b      	ldr	r3, [r1, #16]
 800644a:	b96b      	cbnz	r3, 8006468 <_svfiprintf_r+0x34>
 800644c:	2140      	movs	r1, #64	; 0x40
 800644e:	f000 facb 	bl	80069e8 <_malloc_r>
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	6120      	str	r0, [r4, #16]
 8006456:	b928      	cbnz	r0, 8006464 <_svfiprintf_r+0x30>
 8006458:	230c      	movs	r3, #12
 800645a:	f8c8 3000 	str.w	r3, [r8]
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	e0c8      	b.n	80065f6 <_svfiprintf_r+0x1c2>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	6163      	str	r3, [r4, #20]
 8006468:	2300      	movs	r3, #0
 800646a:	9309      	str	r3, [sp, #36]	; 0x24
 800646c:	2320      	movs	r3, #32
 800646e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006472:	2330      	movs	r3, #48	; 0x30
 8006474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006478:	9503      	str	r5, [sp, #12]
 800647a:	f04f 0b01 	mov.w	fp, #1
 800647e:	4637      	mov	r7, r6
 8006480:	463d      	mov	r5, r7
 8006482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006486:	b10b      	cbz	r3, 800648c <_svfiprintf_r+0x58>
 8006488:	2b25      	cmp	r3, #37	; 0x25
 800648a:	d13e      	bne.n	800650a <_svfiprintf_r+0xd6>
 800648c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006490:	d00b      	beq.n	80064aa <_svfiprintf_r+0x76>
 8006492:	4653      	mov	r3, sl
 8006494:	4632      	mov	r2, r6
 8006496:	4621      	mov	r1, r4
 8006498:	4640      	mov	r0, r8
 800649a:	f7ff ff70 	bl	800637e <__ssputs_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	f000 80a4 	beq.w	80065ec <_svfiprintf_r+0x1b8>
 80064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a6:	4453      	add	r3, sl
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	783b      	ldrb	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 809d 	beq.w	80065ec <_svfiprintf_r+0x1b8>
 80064b2:	2300      	movs	r3, #0
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	9307      	str	r3, [sp, #28]
 80064c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c4:	931a      	str	r3, [sp, #104]	; 0x68
 80064c6:	462f      	mov	r7, r5
 80064c8:	2205      	movs	r2, #5
 80064ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064ce:	4850      	ldr	r0, [pc, #320]	; (8006610 <_svfiprintf_r+0x1dc>)
 80064d0:	f7f9 fe8e 	bl	80001f0 <memchr>
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	b9d0      	cbnz	r0, 800650e <_svfiprintf_r+0xda>
 80064d8:	06d9      	lsls	r1, r3, #27
 80064da:	bf44      	itt	mi
 80064dc:	2220      	movmi	r2, #32
 80064de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064e2:	071a      	lsls	r2, r3, #28
 80064e4:	bf44      	itt	mi
 80064e6:	222b      	movmi	r2, #43	; 0x2b
 80064e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064ec:	782a      	ldrb	r2, [r5, #0]
 80064ee:	2a2a      	cmp	r2, #42	; 0x2a
 80064f0:	d015      	beq.n	800651e <_svfiprintf_r+0xea>
 80064f2:	9a07      	ldr	r2, [sp, #28]
 80064f4:	462f      	mov	r7, r5
 80064f6:	2000      	movs	r0, #0
 80064f8:	250a      	movs	r5, #10
 80064fa:	4639      	mov	r1, r7
 80064fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006500:	3b30      	subs	r3, #48	; 0x30
 8006502:	2b09      	cmp	r3, #9
 8006504:	d94d      	bls.n	80065a2 <_svfiprintf_r+0x16e>
 8006506:	b1b8      	cbz	r0, 8006538 <_svfiprintf_r+0x104>
 8006508:	e00f      	b.n	800652a <_svfiprintf_r+0xf6>
 800650a:	462f      	mov	r7, r5
 800650c:	e7b8      	b.n	8006480 <_svfiprintf_r+0x4c>
 800650e:	4a40      	ldr	r2, [pc, #256]	; (8006610 <_svfiprintf_r+0x1dc>)
 8006510:	1a80      	subs	r0, r0, r2
 8006512:	fa0b f000 	lsl.w	r0, fp, r0
 8006516:	4318      	orrs	r0, r3
 8006518:	9004      	str	r0, [sp, #16]
 800651a:	463d      	mov	r5, r7
 800651c:	e7d3      	b.n	80064c6 <_svfiprintf_r+0x92>
 800651e:	9a03      	ldr	r2, [sp, #12]
 8006520:	1d11      	adds	r1, r2, #4
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	9103      	str	r1, [sp, #12]
 8006526:	2a00      	cmp	r2, #0
 8006528:	db01      	blt.n	800652e <_svfiprintf_r+0xfa>
 800652a:	9207      	str	r2, [sp, #28]
 800652c:	e004      	b.n	8006538 <_svfiprintf_r+0x104>
 800652e:	4252      	negs	r2, r2
 8006530:	f043 0302 	orr.w	r3, r3, #2
 8006534:	9207      	str	r2, [sp, #28]
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	783b      	ldrb	r3, [r7, #0]
 800653a:	2b2e      	cmp	r3, #46	; 0x2e
 800653c:	d10c      	bne.n	8006558 <_svfiprintf_r+0x124>
 800653e:	787b      	ldrb	r3, [r7, #1]
 8006540:	2b2a      	cmp	r3, #42	; 0x2a
 8006542:	d133      	bne.n	80065ac <_svfiprintf_r+0x178>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb8      	it	lt
 8006550:	f04f 33ff 	movlt.w	r3, #4294967295
 8006554:	3702      	adds	r7, #2
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	4d2e      	ldr	r5, [pc, #184]	; (8006614 <_svfiprintf_r+0x1e0>)
 800655a:	7839      	ldrb	r1, [r7, #0]
 800655c:	2203      	movs	r2, #3
 800655e:	4628      	mov	r0, r5
 8006560:	f7f9 fe46 	bl	80001f0 <memchr>
 8006564:	b138      	cbz	r0, 8006576 <_svfiprintf_r+0x142>
 8006566:	2340      	movs	r3, #64	; 0x40
 8006568:	1b40      	subs	r0, r0, r5
 800656a:	fa03 f000 	lsl.w	r0, r3, r0
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	4303      	orrs	r3, r0
 8006572:	3701      	adds	r7, #1
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	7839      	ldrb	r1, [r7, #0]
 8006578:	4827      	ldr	r0, [pc, #156]	; (8006618 <_svfiprintf_r+0x1e4>)
 800657a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657e:	2206      	movs	r2, #6
 8006580:	1c7e      	adds	r6, r7, #1
 8006582:	f7f9 fe35 	bl	80001f0 <memchr>
 8006586:	2800      	cmp	r0, #0
 8006588:	d038      	beq.n	80065fc <_svfiprintf_r+0x1c8>
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <_svfiprintf_r+0x1e8>)
 800658c:	bb13      	cbnz	r3, 80065d4 <_svfiprintf_r+0x1a0>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	3307      	adds	r3, #7
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	3308      	adds	r3, #8
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659c:	444b      	add	r3, r9
 800659e:	9309      	str	r3, [sp, #36]	; 0x24
 80065a0:	e76d      	b.n	800647e <_svfiprintf_r+0x4a>
 80065a2:	fb05 3202 	mla	r2, r5, r2, r3
 80065a6:	2001      	movs	r0, #1
 80065a8:	460f      	mov	r7, r1
 80065aa:	e7a6      	b.n	80064fa <_svfiprintf_r+0xc6>
 80065ac:	2300      	movs	r3, #0
 80065ae:	3701      	adds	r7, #1
 80065b0:	9305      	str	r3, [sp, #20]
 80065b2:	4619      	mov	r1, r3
 80065b4:	250a      	movs	r5, #10
 80065b6:	4638      	mov	r0, r7
 80065b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065bc:	3a30      	subs	r2, #48	; 0x30
 80065be:	2a09      	cmp	r2, #9
 80065c0:	d903      	bls.n	80065ca <_svfiprintf_r+0x196>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0c8      	beq.n	8006558 <_svfiprintf_r+0x124>
 80065c6:	9105      	str	r1, [sp, #20]
 80065c8:	e7c6      	b.n	8006558 <_svfiprintf_r+0x124>
 80065ca:	fb05 2101 	mla	r1, r5, r1, r2
 80065ce:	2301      	movs	r3, #1
 80065d0:	4607      	mov	r7, r0
 80065d2:	e7f0      	b.n	80065b6 <_svfiprintf_r+0x182>
 80065d4:	ab03      	add	r3, sp, #12
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4622      	mov	r2, r4
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <_svfiprintf_r+0x1ec>)
 80065dc:	a904      	add	r1, sp, #16
 80065de:	4640      	mov	r0, r8
 80065e0:	f3af 8000 	nop.w
 80065e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065e8:	4681      	mov	r9, r0
 80065ea:	d1d6      	bne.n	800659a <_svfiprintf_r+0x166>
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	065b      	lsls	r3, r3, #25
 80065f0:	f53f af35 	bmi.w	800645e <_svfiprintf_r+0x2a>
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	b01d      	add	sp, #116	; 0x74
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	ab03      	add	r3, sp, #12
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	4622      	mov	r2, r4
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <_svfiprintf_r+0x1ec>)
 8006604:	a904      	add	r1, sp, #16
 8006606:	4640      	mov	r0, r8
 8006608:	f000 f882 	bl	8006710 <_printf_i>
 800660c:	e7ea      	b.n	80065e4 <_svfiprintf_r+0x1b0>
 800660e:	bf00      	nop
 8006610:	08006b94 	.word	0x08006b94
 8006614:	08006b9a 	.word	0x08006b9a
 8006618:	08006b9e 	.word	0x08006b9e
 800661c:	00000000 	.word	0x00000000
 8006620:	0800637f 	.word	0x0800637f

08006624 <_printf_common>:
 8006624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	4691      	mov	r9, r2
 800662a:	461f      	mov	r7, r3
 800662c:	688a      	ldr	r2, [r1, #8]
 800662e:	690b      	ldr	r3, [r1, #16]
 8006630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006634:	4293      	cmp	r3, r2
 8006636:	bfb8      	it	lt
 8006638:	4613      	movlt	r3, r2
 800663a:	f8c9 3000 	str.w	r3, [r9]
 800663e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006642:	4606      	mov	r6, r0
 8006644:	460c      	mov	r4, r1
 8006646:	b112      	cbz	r2, 800664e <_printf_common+0x2a>
 8006648:	3301      	adds	r3, #1
 800664a:	f8c9 3000 	str.w	r3, [r9]
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	0699      	lsls	r1, r3, #26
 8006652:	bf42      	ittt	mi
 8006654:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006658:	3302      	addmi	r3, #2
 800665a:	f8c9 3000 	strmi.w	r3, [r9]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d107      	bne.n	8006676 <_printf_common+0x52>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	f8d9 2000 	ldr.w	r2, [r9]
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	42ab      	cmp	r3, r5
 8006674:	dc28      	bgt.n	80066c8 <_printf_common+0xa4>
 8006676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	3300      	adds	r3, #0
 800667e:	bf18      	it	ne
 8006680:	2301      	movne	r3, #1
 8006682:	0692      	lsls	r2, r2, #26
 8006684:	d42d      	bmi.n	80066e2 <_printf_common+0xbe>
 8006686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800668a:	4639      	mov	r1, r7
 800668c:	4630      	mov	r0, r6
 800668e:	47c0      	blx	r8
 8006690:	3001      	adds	r0, #1
 8006692:	d020      	beq.n	80066d6 <_printf_common+0xb2>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	68e5      	ldr	r5, [r4, #12]
 8006698:	f8d9 2000 	ldr.w	r2, [r9]
 800669c:	f003 0306 	and.w	r3, r3, #6
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	bf08      	it	eq
 80066a4:	1aad      	subeq	r5, r5, r2
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	bf0c      	ite	eq
 80066ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b0:	2500      	movne	r5, #0
 80066b2:	4293      	cmp	r3, r2
 80066b4:	bfc4      	itt	gt
 80066b6:	1a9b      	subgt	r3, r3, r2
 80066b8:	18ed      	addgt	r5, r5, r3
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	341a      	adds	r4, #26
 80066c0:	454d      	cmp	r5, r9
 80066c2:	d11a      	bne.n	80066fa <_printf_common+0xd6>
 80066c4:	2000      	movs	r0, #0
 80066c6:	e008      	b.n	80066da <_printf_common+0xb6>
 80066c8:	2301      	movs	r3, #1
 80066ca:	4652      	mov	r2, sl
 80066cc:	4639      	mov	r1, r7
 80066ce:	4630      	mov	r0, r6
 80066d0:	47c0      	blx	r8
 80066d2:	3001      	adds	r0, #1
 80066d4:	d103      	bne.n	80066de <_printf_common+0xba>
 80066d6:	f04f 30ff 	mov.w	r0, #4294967295
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	3501      	adds	r5, #1
 80066e0:	e7c3      	b.n	800666a <_printf_common+0x46>
 80066e2:	18e1      	adds	r1, r4, r3
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	2030      	movs	r0, #48	; 0x30
 80066e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066ec:	4422      	add	r2, r4
 80066ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f6:	3302      	adds	r3, #2
 80066f8:	e7c5      	b.n	8006686 <_printf_common+0x62>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4622      	mov	r2, r4
 80066fe:	4639      	mov	r1, r7
 8006700:	4630      	mov	r0, r6
 8006702:	47c0      	blx	r8
 8006704:	3001      	adds	r0, #1
 8006706:	d0e6      	beq.n	80066d6 <_printf_common+0xb2>
 8006708:	f109 0901 	add.w	r9, r9, #1
 800670c:	e7d8      	b.n	80066c0 <_printf_common+0x9c>
	...

08006710 <_printf_i>:
 8006710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006714:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006718:	460c      	mov	r4, r1
 800671a:	7e09      	ldrb	r1, [r1, #24]
 800671c:	b085      	sub	sp, #20
 800671e:	296e      	cmp	r1, #110	; 0x6e
 8006720:	4617      	mov	r7, r2
 8006722:	4606      	mov	r6, r0
 8006724:	4698      	mov	r8, r3
 8006726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006728:	f000 80b3 	beq.w	8006892 <_printf_i+0x182>
 800672c:	d822      	bhi.n	8006774 <_printf_i+0x64>
 800672e:	2963      	cmp	r1, #99	; 0x63
 8006730:	d036      	beq.n	80067a0 <_printf_i+0x90>
 8006732:	d80a      	bhi.n	800674a <_printf_i+0x3a>
 8006734:	2900      	cmp	r1, #0
 8006736:	f000 80b9 	beq.w	80068ac <_printf_i+0x19c>
 800673a:	2958      	cmp	r1, #88	; 0x58
 800673c:	f000 8083 	beq.w	8006846 <_printf_i+0x136>
 8006740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006744:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006748:	e032      	b.n	80067b0 <_printf_i+0xa0>
 800674a:	2964      	cmp	r1, #100	; 0x64
 800674c:	d001      	beq.n	8006752 <_printf_i+0x42>
 800674e:	2969      	cmp	r1, #105	; 0x69
 8006750:	d1f6      	bne.n	8006740 <_printf_i+0x30>
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	6813      	ldr	r3, [r2, #0]
 8006756:	0605      	lsls	r5, r0, #24
 8006758:	f103 0104 	add.w	r1, r3, #4
 800675c:	d52a      	bpl.n	80067b4 <_printf_i+0xa4>
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da03      	bge.n	800676e <_printf_i+0x5e>
 8006766:	222d      	movs	r2, #45	; 0x2d
 8006768:	425b      	negs	r3, r3
 800676a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800676e:	486f      	ldr	r0, [pc, #444]	; (800692c <_printf_i+0x21c>)
 8006770:	220a      	movs	r2, #10
 8006772:	e039      	b.n	80067e8 <_printf_i+0xd8>
 8006774:	2973      	cmp	r1, #115	; 0x73
 8006776:	f000 809d 	beq.w	80068b4 <_printf_i+0x1a4>
 800677a:	d808      	bhi.n	800678e <_printf_i+0x7e>
 800677c:	296f      	cmp	r1, #111	; 0x6f
 800677e:	d020      	beq.n	80067c2 <_printf_i+0xb2>
 8006780:	2970      	cmp	r1, #112	; 0x70
 8006782:	d1dd      	bne.n	8006740 <_printf_i+0x30>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	f043 0320 	orr.w	r3, r3, #32
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	e003      	b.n	8006796 <_printf_i+0x86>
 800678e:	2975      	cmp	r1, #117	; 0x75
 8006790:	d017      	beq.n	80067c2 <_printf_i+0xb2>
 8006792:	2978      	cmp	r1, #120	; 0x78
 8006794:	d1d4      	bne.n	8006740 <_printf_i+0x30>
 8006796:	2378      	movs	r3, #120	; 0x78
 8006798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800679c:	4864      	ldr	r0, [pc, #400]	; (8006930 <_printf_i+0x220>)
 800679e:	e055      	b.n	800684c <_printf_i+0x13c>
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	1d19      	adds	r1, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6011      	str	r1, [r2, #0]
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e08c      	b.n	80068ce <_printf_i+0x1be>
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6011      	str	r1, [r2, #0]
 80067b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067bc:	bf18      	it	ne
 80067be:	b21b      	sxthne	r3, r3
 80067c0:	e7cf      	b.n	8006762 <_printf_i+0x52>
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	6825      	ldr	r5, [r4, #0]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6010      	str	r0, [r2, #0]
 80067ca:	0628      	lsls	r0, r5, #24
 80067cc:	d501      	bpl.n	80067d2 <_printf_i+0xc2>
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	e002      	b.n	80067d8 <_printf_i+0xc8>
 80067d2:	0668      	lsls	r0, r5, #25
 80067d4:	d5fb      	bpl.n	80067ce <_printf_i+0xbe>
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	4854      	ldr	r0, [pc, #336]	; (800692c <_printf_i+0x21c>)
 80067da:	296f      	cmp	r1, #111	; 0x6f
 80067dc:	bf14      	ite	ne
 80067de:	220a      	movne	r2, #10
 80067e0:	2208      	moveq	r2, #8
 80067e2:	2100      	movs	r1, #0
 80067e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067e8:	6865      	ldr	r5, [r4, #4]
 80067ea:	60a5      	str	r5, [r4, #8]
 80067ec:	2d00      	cmp	r5, #0
 80067ee:	f2c0 8095 	blt.w	800691c <_printf_i+0x20c>
 80067f2:	6821      	ldr	r1, [r4, #0]
 80067f4:	f021 0104 	bic.w	r1, r1, #4
 80067f8:	6021      	str	r1, [r4, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d13d      	bne.n	800687a <_printf_i+0x16a>
 80067fe:	2d00      	cmp	r5, #0
 8006800:	f040 808e 	bne.w	8006920 <_printf_i+0x210>
 8006804:	4665      	mov	r5, ip
 8006806:	2a08      	cmp	r2, #8
 8006808:	d10b      	bne.n	8006822 <_printf_i+0x112>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	07db      	lsls	r3, r3, #31
 800680e:	d508      	bpl.n	8006822 <_printf_i+0x112>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	6862      	ldr	r2, [r4, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	bfde      	ittt	le
 8006818:	2330      	movle	r3, #48	; 0x30
 800681a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800681e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006822:	ebac 0305 	sub.w	r3, ip, r5
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	f8cd 8000 	str.w	r8, [sp]
 800682c:	463b      	mov	r3, r7
 800682e:	aa03      	add	r2, sp, #12
 8006830:	4621      	mov	r1, r4
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff fef6 	bl	8006624 <_printf_common>
 8006838:	3001      	adds	r0, #1
 800683a:	d14d      	bne.n	80068d8 <_printf_i+0x1c8>
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b005      	add	sp, #20
 8006842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006846:	4839      	ldr	r0, [pc, #228]	; (800692c <_printf_i+0x21c>)
 8006848:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	6821      	ldr	r1, [r4, #0]
 8006850:	1d1d      	adds	r5, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6015      	str	r5, [r2, #0]
 8006856:	060a      	lsls	r2, r1, #24
 8006858:	d50b      	bpl.n	8006872 <_printf_i+0x162>
 800685a:	07ca      	lsls	r2, r1, #31
 800685c:	bf44      	itt	mi
 800685e:	f041 0120 	orrmi.w	r1, r1, #32
 8006862:	6021      	strmi	r1, [r4, #0]
 8006864:	b91b      	cbnz	r3, 800686e <_printf_i+0x15e>
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	f022 0220 	bic.w	r2, r2, #32
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	e7b7      	b.n	80067e2 <_printf_i+0xd2>
 8006872:	064d      	lsls	r5, r1, #25
 8006874:	bf48      	it	mi
 8006876:	b29b      	uxthmi	r3, r3
 8006878:	e7ef      	b.n	800685a <_printf_i+0x14a>
 800687a:	4665      	mov	r5, ip
 800687c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006880:	fb02 3311 	mls	r3, r2, r1, r3
 8006884:	5cc3      	ldrb	r3, [r0, r3]
 8006886:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800688a:	460b      	mov	r3, r1
 800688c:	2900      	cmp	r1, #0
 800688e:	d1f5      	bne.n	800687c <_printf_i+0x16c>
 8006890:	e7b9      	b.n	8006806 <_printf_i+0xf6>
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	6961      	ldr	r1, [r4, #20]
 8006898:	1d18      	adds	r0, r3, #4
 800689a:	6010      	str	r0, [r2, #0]
 800689c:	0628      	lsls	r0, r5, #24
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	d501      	bpl.n	80068a6 <_printf_i+0x196>
 80068a2:	6019      	str	r1, [r3, #0]
 80068a4:	e002      	b.n	80068ac <_printf_i+0x19c>
 80068a6:	066a      	lsls	r2, r5, #25
 80068a8:	d5fb      	bpl.n	80068a2 <_printf_i+0x192>
 80068aa:	8019      	strh	r1, [r3, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	6123      	str	r3, [r4, #16]
 80068b0:	4665      	mov	r5, ip
 80068b2:	e7b9      	b.n	8006828 <_printf_i+0x118>
 80068b4:	6813      	ldr	r3, [r2, #0]
 80068b6:	1d19      	adds	r1, r3, #4
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	681d      	ldr	r5, [r3, #0]
 80068bc:	6862      	ldr	r2, [r4, #4]
 80068be:	2100      	movs	r1, #0
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7f9 fc95 	bl	80001f0 <memchr>
 80068c6:	b108      	cbz	r0, 80068cc <_printf_i+0x1bc>
 80068c8:	1b40      	subs	r0, r0, r5
 80068ca:	6060      	str	r0, [r4, #4]
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	2300      	movs	r3, #0
 80068d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d6:	e7a7      	b.n	8006828 <_printf_i+0x118>
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	462a      	mov	r2, r5
 80068dc:	4639      	mov	r1, r7
 80068de:	4630      	mov	r0, r6
 80068e0:	47c0      	blx	r8
 80068e2:	3001      	adds	r0, #1
 80068e4:	d0aa      	beq.n	800683c <_printf_i+0x12c>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	079b      	lsls	r3, r3, #30
 80068ea:	d413      	bmi.n	8006914 <_printf_i+0x204>
 80068ec:	68e0      	ldr	r0, [r4, #12]
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	4298      	cmp	r0, r3
 80068f2:	bfb8      	it	lt
 80068f4:	4618      	movlt	r0, r3
 80068f6:	e7a3      	b.n	8006840 <_printf_i+0x130>
 80068f8:	2301      	movs	r3, #1
 80068fa:	464a      	mov	r2, r9
 80068fc:	4639      	mov	r1, r7
 80068fe:	4630      	mov	r0, r6
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d09a      	beq.n	800683c <_printf_i+0x12c>
 8006906:	3501      	adds	r5, #1
 8006908:	68e3      	ldr	r3, [r4, #12]
 800690a:	9a03      	ldr	r2, [sp, #12]
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	42ab      	cmp	r3, r5
 8006910:	dcf2      	bgt.n	80068f8 <_printf_i+0x1e8>
 8006912:	e7eb      	b.n	80068ec <_printf_i+0x1dc>
 8006914:	2500      	movs	r5, #0
 8006916:	f104 0919 	add.w	r9, r4, #25
 800691a:	e7f5      	b.n	8006908 <_printf_i+0x1f8>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ac      	bne.n	800687a <_printf_i+0x16a>
 8006920:	7803      	ldrb	r3, [r0, #0]
 8006922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800692a:	e76c      	b.n	8006806 <_printf_i+0xf6>
 800692c:	08006ba5 	.word	0x08006ba5
 8006930:	08006bb6 	.word	0x08006bb6

08006934 <memcpy>:
 8006934:	b510      	push	{r4, lr}
 8006936:	1e43      	subs	r3, r0, #1
 8006938:	440a      	add	r2, r1
 800693a:	4291      	cmp	r1, r2
 800693c:	d100      	bne.n	8006940 <memcpy+0xc>
 800693e:	bd10      	pop	{r4, pc}
 8006940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006948:	e7f7      	b.n	800693a <memcpy+0x6>
	...

0800694c <_free_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4605      	mov	r5, r0
 8006950:	2900      	cmp	r1, #0
 8006952:	d045      	beq.n	80069e0 <_free_r+0x94>
 8006954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006958:	1f0c      	subs	r4, r1, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfb8      	it	lt
 800695e:	18e4      	addlt	r4, r4, r3
 8006960:	f000 f8d2 	bl	8006b08 <__malloc_lock>
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <_free_r+0x98>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	4610      	mov	r0, r2
 800696a:	b933      	cbnz	r3, 800697a <_free_r+0x2e>
 800696c:	6063      	str	r3, [r4, #4]
 800696e:	6014      	str	r4, [r2, #0]
 8006970:	4628      	mov	r0, r5
 8006972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006976:	f000 b8c8 	b.w	8006b0a <__malloc_unlock>
 800697a:	42a3      	cmp	r3, r4
 800697c:	d90c      	bls.n	8006998 <_free_r+0x4c>
 800697e:	6821      	ldr	r1, [r4, #0]
 8006980:	1862      	adds	r2, r4, r1
 8006982:	4293      	cmp	r3, r2
 8006984:	bf04      	itt	eq
 8006986:	681a      	ldreq	r2, [r3, #0]
 8006988:	685b      	ldreq	r3, [r3, #4]
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	bf04      	itt	eq
 800698e:	1852      	addeq	r2, r2, r1
 8006990:	6022      	streq	r2, [r4, #0]
 8006992:	6004      	str	r4, [r0, #0]
 8006994:	e7ec      	b.n	8006970 <_free_r+0x24>
 8006996:	4613      	mov	r3, r2
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	b10a      	cbz	r2, 80069a0 <_free_r+0x54>
 800699c:	42a2      	cmp	r2, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x4a>
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	1858      	adds	r0, r3, r1
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x74>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	1858      	adds	r0, r3, r1
 80069ae:	4282      	cmp	r2, r0
 80069b0:	6019      	str	r1, [r3, #0]
 80069b2:	d1dd      	bne.n	8006970 <_free_r+0x24>
 80069b4:	6810      	ldr	r0, [r2, #0]
 80069b6:	6852      	ldr	r2, [r2, #4]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	4401      	add	r1, r0
 80069bc:	6019      	str	r1, [r3, #0]
 80069be:	e7d7      	b.n	8006970 <_free_r+0x24>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x7c>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d3      	b.n	8006970 <_free_r+0x24>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428a      	cmp	r2, r1
 80069ce:	bf04      	itt	eq
 80069d0:	6811      	ldreq	r1, [r2, #0]
 80069d2:	6852      	ldreq	r2, [r2, #4]
 80069d4:	6062      	str	r2, [r4, #4]
 80069d6:	bf04      	itt	eq
 80069d8:	1809      	addeq	r1, r1, r0
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	605c      	str	r4, [r3, #4]
 80069de:	e7c7      	b.n	8006970 <_free_r+0x24>
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	20001308 	.word	0x20001308

080069e8 <_malloc_r>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	1ccd      	adds	r5, r1, #3
 80069ec:	f025 0503 	bic.w	r5, r5, #3
 80069f0:	3508      	adds	r5, #8
 80069f2:	2d0c      	cmp	r5, #12
 80069f4:	bf38      	it	cc
 80069f6:	250c      	movcc	r5, #12
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	4606      	mov	r6, r0
 80069fc:	db01      	blt.n	8006a02 <_malloc_r+0x1a>
 80069fe:	42a9      	cmp	r1, r5
 8006a00:	d903      	bls.n	8006a0a <_malloc_r+0x22>
 8006a02:	230c      	movs	r3, #12
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	2000      	movs	r0, #0
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
 8006a0a:	f000 f87d 	bl	8006b08 <__malloc_lock>
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <_malloc_r+0xac>)
 8006a10:	6814      	ldr	r4, [r2, #0]
 8006a12:	4621      	mov	r1, r4
 8006a14:	b991      	cbnz	r1, 8006a3c <_malloc_r+0x54>
 8006a16:	4c20      	ldr	r4, [pc, #128]	; (8006a98 <_malloc_r+0xb0>)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	b91b      	cbnz	r3, 8006a24 <_malloc_r+0x3c>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f863 	bl	8006ae8 <_sbrk_r>
 8006a22:	6020      	str	r0, [r4, #0]
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f000 f85e 	bl	8006ae8 <_sbrk_r>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d124      	bne.n	8006a7a <_malloc_r+0x92>
 8006a30:	230c      	movs	r3, #12
 8006a32:	6033      	str	r3, [r6, #0]
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f868 	bl	8006b0a <__malloc_unlock>
 8006a3a:	e7e4      	b.n	8006a06 <_malloc_r+0x1e>
 8006a3c:	680b      	ldr	r3, [r1, #0]
 8006a3e:	1b5b      	subs	r3, r3, r5
 8006a40:	d418      	bmi.n	8006a74 <_malloc_r+0x8c>
 8006a42:	2b0b      	cmp	r3, #11
 8006a44:	d90f      	bls.n	8006a66 <_malloc_r+0x7e>
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	50cd      	str	r5, [r1, r3]
 8006a4a:	18cc      	adds	r4, r1, r3
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 f85c 	bl	8006b0a <__malloc_unlock>
 8006a52:	f104 000b 	add.w	r0, r4, #11
 8006a56:	1d23      	adds	r3, r4, #4
 8006a58:	f020 0007 	bic.w	r0, r0, #7
 8006a5c:	1ac3      	subs	r3, r0, r3
 8006a5e:	d0d3      	beq.n	8006a08 <_malloc_r+0x20>
 8006a60:	425a      	negs	r2, r3
 8006a62:	50e2      	str	r2, [r4, r3]
 8006a64:	e7d0      	b.n	8006a08 <_malloc_r+0x20>
 8006a66:	428c      	cmp	r4, r1
 8006a68:	684b      	ldr	r3, [r1, #4]
 8006a6a:	bf16      	itet	ne
 8006a6c:	6063      	strne	r3, [r4, #4]
 8006a6e:	6013      	streq	r3, [r2, #0]
 8006a70:	460c      	movne	r4, r1
 8006a72:	e7eb      	b.n	8006a4c <_malloc_r+0x64>
 8006a74:	460c      	mov	r4, r1
 8006a76:	6849      	ldr	r1, [r1, #4]
 8006a78:	e7cc      	b.n	8006a14 <_malloc_r+0x2c>
 8006a7a:	1cc4      	adds	r4, r0, #3
 8006a7c:	f024 0403 	bic.w	r4, r4, #3
 8006a80:	42a0      	cmp	r0, r4
 8006a82:	d005      	beq.n	8006a90 <_malloc_r+0xa8>
 8006a84:	1a21      	subs	r1, r4, r0
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 f82e 	bl	8006ae8 <_sbrk_r>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d0cf      	beq.n	8006a30 <_malloc_r+0x48>
 8006a90:	6025      	str	r5, [r4, #0]
 8006a92:	e7db      	b.n	8006a4c <_malloc_r+0x64>
 8006a94:	20001308 	.word	0x20001308
 8006a98:	2000130c 	.word	0x2000130c

08006a9c <_realloc_r>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	460e      	mov	r6, r1
 8006aa4:	b921      	cbnz	r1, 8006ab0 <_realloc_r+0x14>
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006aac:	f7ff bf9c 	b.w	80069e8 <_malloc_r>
 8006ab0:	b922      	cbnz	r2, 8006abc <_realloc_r+0x20>
 8006ab2:	f7ff ff4b 	bl	800694c <_free_r>
 8006ab6:	4625      	mov	r5, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006abc:	f000 f826 	bl	8006b0c <_malloc_usable_size_r>
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d20f      	bcs.n	8006ae4 <_realloc_r+0x48>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7ff ff8e 	bl	80069e8 <_malloc_r>
 8006acc:	4605      	mov	r5, r0
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0f2      	beq.n	8006ab8 <_realloc_r+0x1c>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	f7ff ff2d 	bl	8006934 <memcpy>
 8006ada:	4631      	mov	r1, r6
 8006adc:	4638      	mov	r0, r7
 8006ade:	f7ff ff35 	bl	800694c <_free_r>
 8006ae2:	e7e9      	b.n	8006ab8 <_realloc_r+0x1c>
 8006ae4:	4635      	mov	r5, r6
 8006ae6:	e7e7      	b.n	8006ab8 <_realloc_r+0x1c>

08006ae8 <_sbrk_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4c06      	ldr	r4, [pc, #24]	; (8006b04 <_sbrk_r+0x1c>)
 8006aec:	2300      	movs	r3, #0
 8006aee:	4605      	mov	r5, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	f7fb fd20 	bl	8002538 <_sbrk>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_sbrk_r+0x1a>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_sbrk_r+0x1a>
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	20002548 	.word	0x20002548

08006b08 <__malloc_lock>:
 8006b08:	4770      	bx	lr

08006b0a <__malloc_unlock>:
 8006b0a:	4770      	bx	lr

08006b0c <_malloc_usable_size_r>:
 8006b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b10:	1f18      	subs	r0, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfbc      	itt	lt
 8006b16:	580b      	ldrlt	r3, [r1, r0]
 8006b18:	18c0      	addlt	r0, r0, r3
 8006b1a:	4770      	bx	lr

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr
